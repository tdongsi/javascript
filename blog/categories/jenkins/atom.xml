<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jenkins | Archived Blog Posts]]></title>
  <link href="http://tdongsi.github.io/javascript/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/javascript/"/>
  <updated>2021-03-11T15:03:36-08:00</updated>
  <id>http://tdongsi.github.io/javascript/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins World 2017]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/08/29/jenkins-world-2017/"/>
    <updated>2017-08-29T08:47:04-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/08/29/jenkins-world-2017</id>
    <content type="html"><![CDATA[<p>Some interesting talks in <a href="https://www.cloudbees.com/jenkinsworld/schedule">Jenkins World 2017</a> are summarized in this blog post.</p>

<!--more-->


<h3>Jenkins Pipeline on your Local Box to Reduce Cycle Time</h3>

<p>Interesting proposal (with <strong>demo</strong>, a big plus) to resolve the following problems (added my own experience):</p>

<ul>
<li>Non repeatble builds due to allocated physical slaves with reused workspaces.

<ul>
<li>The idea is equivalent to use Dockerized Jenkins for local job runs before running on central Jenkins.</li>
<li>My current alternative is to use containerized Jenkins slaves using Kubernetes plugin.</li>
</ul>
</li>
<li>Merging of two companies (YNAP + GerritForge)

<ul>
<li>Not applicable. However, for large corporates, two product teams can feel like two companies.</li>
</ul>
</li>
<li>Need for fast feedback

<ul>
<li>Same</li>
</ul>
</li>
<li>One master cannot suit all: central CI not flexible to local team needs.

<ul>
<li>Maybe applicable for team CI and company-wide CI.</li>
</ul>
</li>
<li>Scalability: central CI only handle <code>master</code> job runs instead of multiple feature job runs.</li>
</ul>


<p>Reference:</p>

<ul>
<li><a href="https://github.com/NET-A-PORTER/jenkinsworld-2017-sample-app">Code repo</a></li>
</ul>


<pre><code class="groovy default Jenkinsfile">#!/bin/env groovy

node {
    checkout scm

    echo env.JENKINS_URL
    if(env.JENKINS_URL ==~ /.*central-pipeline.*/) {
        echo "loading central"
        load "central/Jenkinsfile"
    } else {
        echo "loading local"
        load "local/Jenkinsfile"
    }
}()
</code></pre>

<pre><code class="groovy local Jenkinsfile">{ -&gt; docker.image('slave-sbt').inside 
    {
        stage('Build') {
            sh sbt('compile')
        }
        stage('Test') {
            sh sbt('test')
        }
        stage('Deploy Locally') {
            sh sbt('docker:publishLocal')

            def dockerTag = (sh(script: "git describe --tags HEAD", returnStdout: true)).trim()
            cleanUpOldContainers(dockerTag)
            runContainer(dockerTag)

            def containerUrl = getRunningContainerURL(dockerTag)

            echo "Running on $containerUrl"
            currentBuild.setDescription("$containerUrl")


        }

        stage('Push to GitHub') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                              credentialsId: 'github',
                              usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "git branch --list ${env.BRANCH_NAME} || git checkout -b ${env.BRANCH_NAME}"
                sh "git push -f https://$USERNAME:$PASSWORD@github.com/NET-A-PORTER/jenkinsworld-2017-sample-app HEAD:refs/heads/${env.BRANCH_NAME}"
            }
        }
    }
}

...
</code></pre>

<pre><code class="groovy central Jenkinsfile">{ -&gt; docker.image('slave-sbt').inside
    {
        stage('Build') {
                sh sbt('compile')
        }
        stage('Creating Docker container') {
                sh sbt('docker:stage')
        }
        if (env.BRANCH_NAME == "master") {
            stage('Deploy to Heroku') {
                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                                  credentialsId: 'heroku',
                                  usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    sh "echo 'machine git.heroku.com login $USERNAME password $PASSWORD' &gt; ~/.netrc"
                    sh "chmod 600 ~/.netrc"
                    sh "git push -f https://git.heroku.com/jenkinsworld-2017-sample-app.git HEAD:master"
                }
            }
        }
    }
}

def sbt(target) {
    return "sbt -no-colors $target"
}
</code></pre>

<h3>Managing Jenkins with CloudBees Jenkins Team</h3>

<p>CloudBees Jenkins is the Enterprise version of Jenkins, as opposed to Open-Source Jenkins.
This enterprise version offers the following features:</p>

<ul>
<li>Beekeeper Upgrade Assistant: Plugin upgrade compatibility, Compliance report.</li>
<li>Upgrade simulations to make sure the upgrade is compatible with current jobs/plugins.</li>
</ul>


<p>Like many other tools presented in the conference, you can do many &ldquo;awesome&rdquo; things <strong>IF</strong> you pay for it.
The only problem is if you have the budget to pay for it.</p>

<h3>Let&rsquo;s build a Jenkins Pipeline</h3>

<p>Basic tutorial on Jenkinsfile with Declarative syntax.
Not that interesting if you are already familiar with Jenkinsfile.</p>

<ul>
<li><a href="https://www.slideshare.net/secret/5d85kTqLfjOgdC">Slides</a></li>
<li><a href="https://gist.github.com/ericlong/25fd60f197f6c4c7b8f265af7a351e75">Code snippets</a></li>
</ul>


<h3>Developing Pipeline Libraries Locally</h3>

<p>If you have ever tried developing Pipeline Libraries, you may have noticed how long it takes to deploy a new version to server to discover just another syntax error. Oleg will show how to edit and test Pipeline libraries locally before committing to the repository (with Configuration-as-Code and Docker).</p>

<ul>
<li><a href="https://hub.docker.com/r/onenashev/demo-jenkins-config-as-code/">DockerHub repo</a></li>
<li><a href="https://github.com/oleg-nenashev/demo-jenkins-config-as-code">Github repo</a></li>
</ul>


<!-- Photos:
IMG_1097
IMG_1098
IMG_1099
-->


<h3>Securing a Jenkins Instance</h3>

<p>See <a href="/blog/2017/09/05/securing-jenkins-with-nginx/">this post</a>.</p>

<!-- Photos:
IMG_[1100..1107]
-->


<h3>Scaling Jenkins with Kubernetes</h3>

<p>We are already using Kubernetes plugin in production.
The talk mostly recaps how to use the plugin.</p>

<ul>
<li><a href="https://github.com/jenkinsci/kubernetes-plugin/tree/master/examples">Examples</a>

<ul>
<li>Interesting examples include <a href="https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/multi-container.groovy">multi-container</a>, <a href="https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/selenium.groovy">selenium</a>.</li>
</ul>
</li>
</ul>


<!-- Photos:
IMG_[1117..1121]
-->


<h3>Declarative Pipelines in Jenkins</h3>

<p>New features and improvements in Declarative Jenkinsfile are announced.
Those include:</p>

<ul>
<li><code>changelog</code>: examines the commit log messages with a regular expression.</li>
<li><code>changeset</code>: the affected file paths in the changelog.</li>
</ul>


<!-- Photos:
IMG_[1123..1134]
-->


<h3>Codifying the Build and Release Process with a Jenkins Pipeline Shared Library</h3>

<p>Almost all of the Jenkins workflows practiced at FireEye are already implemented in our Jenkins.
It&rsquo;s assuring to know that we are using the best practices and not way behind the pack.
However, I got a glimpse of potential struggles (mostly from inertia) migrating from a legacy Jenkins system (1.x) to Jenkinsfile-based system (2.x).</p>

<!-- Photos:
IMG_[1135..1138]
-->




<!-- Pimp my Blue Ocean
Photos:
IMG_[1139..1144]
-->


<h3>Mozilla’s Declarative + Shared Libraries Setup</h3>

<p>How Mozilla is using <strong>Declarative</strong> Pipelines and shared libraries together.</p>

<ul>
<li><a href="https://github.com/mozilla/fxtest-jenkins-pipeline">Github repo</a></li>
<li><a href="https://github.com/mozilla/mozillians-tests/blob/master/Jenkinsfile">Example Jenkinsfile</a></li>
</ul>


<!-- Photos:
IMG_[1145..1150]
-->


<h3>Pipelines At Scale: How Big, How Fast, How Many?</h3>

<p>Interesting point: Each pipeline step is similar to a database transaction: each step requires an atomic record in case of Jenkins restart.
Therefore, it is better to have a large enough transaction than multiple small transactions (e.g., <code>sh</code> step).</p>

<p>For comprehensive study of this topic (Jenkins performance), there are many articles/blog posts written by same author (Sam Van Oort).</p>

<!-- Photos:
IMG_[1151..1163]
-->


<h3>JenkinsPipelineUnit: Test your Continuous Delivery Pipeline</h3>

<p>JenkinsPipelineUnit allows unit testing the Jenkinsfile locally by mocking the Pipeline steps.
In my opinion, it seems only useful for reducing the <strong>syntax</strong> mistakes when developing Jenkinsfile OR global shared library.
You still have to verify functionality in a real Jenkins system.
Its compatibility with Declarative syntax is also questionable, admitted by the speakers/authors.
In addition, it is NOT for developling a Jenkins plugin. In that case, use JenkinsRule.</p>

<ul>
<li><a href="https://github.com/lesfurets/JenkinsPipelineUnit">Github repo</a></li>
</ul>


<!-- Photos:
IMG_[1164..1170]
-->


<h3>Securing a Jenkins Instance</h3>

<p>Demo &ldquo;Securing a Jenkins Instance&rdquo; at Jenkins Booth in Jenkins World 2017 by Claudiu Guiman.</p>

<p><blockquote><p>A set of minimum steps every Jenkins Admin should follow so his public-facing Jenkins instance doesn’t turn into a Bitcoin mine.</p></blockquote></p>

<pre><code class="plain nginx configuration">server {
    listen 80;
    server_name demo-001.eastus.cloudapp.azure.com;
    location / {
        proxy_set_header        Host $host:$server_port;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_pass              http://localhost:8080;
        proxy_redirect          http://localhost:8080 http://demo-001.eastus.cloudapp.azure.com;
        proxy_read_timeout      90;
    }

    # block requests to /cli
    location /cli {
        deny all;
    }

    # block requests to /login
    location ~ /login* {
        deny all;
    }
}
</code></pre>

<pre><code class="plain Running nginx">$ cp ~/demo/default /etc/nginx/sites-enabled/default
$ sudo service nginx restart
$ sudo ufw deny 8080
</code></pre>

<p>If your Jenkins is hosted in AWS/Google Cloud, you should consider setting this up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Job DSL Plugin in Jenkins]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/10/30/job-dsl-plugin-in-jenkins/"/>
    <updated>2016-10-30T18:27:07-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/10/30/job-dsl-plugin-in-jenkins</id>
    <content type="html"><![CDATA[<p>How Job DSL plugin works and why it is losing its dominance to Jenkins Pipeline.</p>

<!--more-->


<h3>Job DSL</h3>

<pre><code class="groovy Minimal Job DSL">job('Demo') {
    description("Starting pipeline")
    logRotator {
        daysToKeep(15)
    }
    steps {
        shell('echo "Hello World"')
    } 
}
</code></pre>

<p>To illustrate the idea.
Obviously, lots of work need to be done to make sure the final generated <code>config.xml</code> is valid, including escaping special characters.</p>

<pre><code class="groovy Simple implementation of Job DSL">class GroovyDsl {

    def description(String description) {
        print '&lt;description&gt;'
        print description
        println '&lt;/description&gt;'
    }

    def logRotator(Closure inner) {
        println '&lt;logRotator&gt;'
        inner()
        println '&lt;/logRotator&gt;'
    }

    def steps(Closure inner) {
        println '&lt;builders&gt;'
        inner()
        println '&lt;/builders&gt;'
    }

    static void job(String name, Closure closure) {
        GroovyDsl body = new GroovyDsl()

        println "Generating a Freestyle job $name"
        println "Save the following into config.xml file"
        println '&lt;project&gt;'
        body.with(closure)
        println '&lt;/project&gt;'
    }

}

def daysToKeep(int num) {
    println "&lt;daysToKeep&gt;$num&lt;/daysToKeep&gt;"
    println '&lt;numToKeep&gt;-1&lt;/numToKeep&gt;'
    println '&lt;artifactDaysToKeep&gt;-1&lt;/artifactDaysToKeep&gt;'
    println '&lt;artifactNumToKeep&gt;-1&lt;/artifactNumToKeep&gt;'
}

def shell(String cmd) {
    println '&lt;hudson.tasks.Shell&gt;'
    println '&lt;command&gt;'
    println cmd
    println '&lt;/command&gt;'
    println '&lt;/hudson.tasks.Shell&gt;'
}

GroovyDsl.job('Demo') {
    description("Starting pipeline")
    logRotator {
        daysToKeep(15)
    }
    steps {
        shell('echo "Hello World"')
    } 
}
</code></pre>

<pre><code class="xml Output of the above script">Generating a Freestyle job Demo
Save the following into config.xml file
&lt;project&gt;
&lt;description&gt;Starting pipeline&lt;/description&gt;
&lt;logRotator&gt;
&lt;daysToKeep&gt;15&lt;/daysToKeep&gt;
&lt;numToKeep&gt;-1&lt;/numToKeep&gt;
&lt;artifactDaysToKeep&gt;-1&lt;/artifactDaysToKeep&gt;
&lt;artifactNumToKeep&gt;-1&lt;/artifactNumToKeep&gt;
&lt;/logRotator&gt;
&lt;builders&gt;
&lt;hudson.tasks.Shell&gt;
&lt;command&gt;
echo "Hello World"
&lt;/command&gt;
&lt;/hudson.tasks.Shell&gt;
&lt;/builders&gt;
&lt;/project&gt;
</code></pre>

<p>Compared with the Jenkins config.xml of the Freestyle job generated by the same Job DSL, we can see that there is not much different.</p>

<pre><code class="xml Output of config.xml in Jenkins">&lt;project&gt;
&lt;actions/&gt;
&lt;description&gt;Starting pipeline&lt;/description&gt;
&lt;keepDependencies&gt;false&lt;/keepDependencies&gt;
&lt;properties/&gt;
&lt;scm class="hudson.scm.NullSCM"/&gt;
&lt;canRoam&gt;true&lt;/canRoam&gt;
&lt;disabled&gt;false&lt;/disabled&gt;
&lt;blockBuildWhenDownstreamBuilding&gt;false&lt;/blockBuildWhenDownstreamBuilding&gt;
&lt;blockBuildWhenUpstreamBuilding&gt;false&lt;/blockBuildWhenUpstreamBuilding&gt;
&lt;triggers/&gt;
&lt;concurrentBuild&gt;false&lt;/concurrentBuild&gt;
&lt;builders&gt;
&lt;hudson.tasks.Shell&gt;
&lt;command&gt;echo "Hello World"&lt;/command&gt;
&lt;/hudson.tasks.Shell&gt;
&lt;/builders&gt;
&lt;publishers/&gt;
&lt;buildWrappers/&gt;
&lt;logRotator&gt;
&lt;daysToKeep&gt;15&lt;/daysToKeep&gt;
&lt;numToKeep&gt;-1&lt;/numToKeep&gt;
&lt;artifactDaysToKeep&gt;-1&lt;/artifactDaysToKeep&gt;
&lt;artifactNumToKeep&gt;-1&lt;/artifactNumToKeep&gt;
&lt;/logRotator&gt;
&lt;/project&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Tests Pass on Local but Fail on CI]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/06/30/java-intermittent-test-failures/"/>
    <updated>2016-06-30T17:51:13-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/06/30/java-intermittent-test-failures</id>
    <content type="html"><![CDATA[<p>We have all seen it before: intermittent unit test failures.
It could be agonizing that unit tests pass locally, but then fail in the Jenkins unit test build.</p>

<!--more-->


<p>In our experience, one of the most common causes is:
<strong>static initialization code that dynamically sets a static member variable from a config file value.</strong></p>

<p>What happens locally?
If you’re running from the command line, you probably have some environment variables set.
These allow some ConfigHelper class to find the resource properties files and load them.
In the end, code that looks like the following often ends up succeeding:</p>

<pre><code class="java DbQueue class">private static final String MY_CONFIG = ConfigHelper.getBoolean("config_key", false);
</code></pre>

<p>But the unit tests on the CI server run without being set up for a Tomcat application server run.
Instead, they run using some mock framework such as JMockit.
Mocking in this scenario is a good, desirable thing.
However, it also means that code like that ends up failing to find those resources.
In the example above, the class <code>DbQueue</code>&rsquo;s static code was invoked <strong>even though the class itself has been mocked out</strong>.
And very often, classes like that throw some misleading exceptions, especially when trying to load and convert to a numeric value from a resource.</p>

<p>So, how do we fix it?
How do we prevent that class static member initialization code from being invoked in Jenkins test build?
The answer is when we mock the class in JMockit using the <code>@Mocked</code> annotation, we can provide the <code>stubOutClassInitialization=true</code> parameter, like this:</p>

<pre><code class="java Mock with JMockit">public class MyTest {
    @Mocked( stubOutClassInitialization = true )
    DbQueue queue;

    ...
}
</code></pre>

<p>That will prevent the static code in the class <code>DbQueue</code> from running in Jenkins unit test builds.
The additional benefit of doing this <em>correctly</em> and <em>completely</em> is that we’ll be able to run our unit tests from inside Eclipse WITHOUT setting the <code>–DSBNHOME=</code> environment variable and the test will still complete as desired.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Maven Tests in Jenkins]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2015/09/03/running-maven-tests-in-jenkins/"/>
    <updated>2015-09-03T01:10:36-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2015/09/03/running-maven-tests-in-jenkins</id>
    <content type="html"><![CDATA[<p>A few notes on executing Maven + TestNG tests in Jenkins.</p>

<!--more-->


<h3>Running tests</h3>

<p>Use the following Maven commands in Jenkins when executing tests.</p>

<pre><code class="plain Running tests">mvn -f pom.xml clean test
</code></pre>

<p>In pom.xml, the test suite file should be specified, such as testng.xml.
To run a custom TestNG test suite file, use the following command:</p>

<pre><code class="plain Custom TestNG test suite">mvn clean test -DsuiteXmlFile=testng.xml
</code></pre>

<p>To run a specific TestNG class, use the following command:</p>

<pre><code class="plain Run specific TestNG class/method">mvn clean test -Dtest=TestCircle

mvn clean test -Dtest=TestCircle#test_area
</code></pre>

<p>Note that the symbol <code>#</code> must be used between class name and method name.
In other words, <code>-Dtest=TestCircle.test_area</code> will not work.</p>

<h4>Links</h4>

<ol>
<li><a href="http://www.vazzolla.com/2013/03/how-to-select-which-testng-suites-to-run-in-maven-surefire-plugin/">Custom TestNG suite file</a></li>
<li><a href="http://stackoverflow.com/questions/1873995/run-a-single-test-method-with-maven">Select method in test class</a></li>
</ol>


<h3>Configuring tests</h3>

<p>Sometimes, your tests need to access resources outside of standard Eclipse/Maven project folders.
For the tests to pass both locally and on Jenkins, the full path to the current workspace may be required to resolve the file path to those resources in tests.
Jenkins set a number of <a href="https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project">environment variables</a>, including the variable
<code>WORKSPACE</code> as the absolute path of the workspace.</p>

<p>For local environment, we need to set environment variable <code>WORKSPACE</code> to simulate Jenkins environment.
In the tests, we need to retrieve this environment variable, as follows in Java:</p>

<pre><code class="java Getting environment variable">String wsPath = System.getenv("WORKSPACE");
</code></pre>

<p>Besides workspace&rsquo;s absolute path, we might also need to configure some constants in tests from a configuration file.
When initializing constants from properties files in Maven, remember:</p>

<ul>
<li>Use <code>this.class.getResourceAsStream()</code> method.</li>
<li>By Maven convention, properties file should be in <code>src/main/resources</code> folder.</li>
<li>Default property values could be used when reading properties file.</li>
</ul>


<pre><code class="java Example">    public static final String CONFIG_PATH = "/config.properties";

    static {
        Properties prop = new Properties();
        try ( InputStream stream = VerticaConnection.class.getResourceAsStream(MyConstants.CONFIG_PATH) ) {
            prop.load(stream);

            // Set values from config file with default values
            UNIT_TEST_SCHEMA = prop.getProperty("schema", "UNIT_TEST");
            FUNC_TEST_SCHEMA = prop.getProperty("schema", "FUNC_TEST");
            VSQL_PATH = prop.getProperty("vsql_path", "/opt/vertica/bin/vsql");

        } catch (FileNotFoundException e) {
            System.err.println("Cannot find file " + MyConstants.CONFIG_PATH);
            throw new IllegalStateException("Could not init class VerticaConnection.", e);
        } catch (IOException e) {
            System.err.println("Error reading file " + MyConstants.CONFIG_PATH);
            throw new IllegalStateException("Could not init class VerticaConnection.", e);
        }
    }
</code></pre>

<p>Note that the location of the properties file in the example above is <code>src/main/resources/config.properties</code>.</p>
]]></content>
  </entry>
  
</feed>
