<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/javascript/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/javascript/"/>
  <updated>2017-09-12T10:42:50-07:00</updated>
  <id>http://tdongsi.github.io/javascript/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for JavaScript Programming Test]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/06/21/tutorial-quick-start-for-javascript-programming-test/"/>
    <updated>2017-06-21T00:58:03-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/06/21/tutorial-quick-start-for-javascript-programming-test</id>
    <content type="html"><![CDATA[<p>For timed programming tests, new test-takers usually underestimate how short two and a half hours can be (more <a href="https://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test/">here</a>).
This post lists out steps to get started quickly for a JavaScript programming test, using React.</p>

<!--more-->


<p>Using this boiler plate <a href="https://github.com/davezuko/react-redux-starter-kit">https://github.com/davezuko/react-redux-starter-kit</a></p>

<p>For example, build the followings:</p>

<ul>
<li>As a player I want to move my objects around the screen using the keyboard (or any preferred input device)</li>
<li>If the object meets other objects in the screen, give some feedback.</li>
</ul>


<h3>Start an empty project</h3>

<pre><code class="plain Starting a Node project"># Init by creating package.json file
npm init
# Answer questions to create package.json file

# Adding grunt
npm install grunt --save-dev
npm install grunt-jslint --save-dev
npm install load-grunt-tasks --save-dev

# Initalizing Gruntfile
npm install grunt-init -g
grunt-init gruntfile
# grunt-init node
</code></pre>

<p>At the end of these steps, you have a basic <code>package.json</code> and <code>Gruntfile</code>.</p>

<pre><code class="javascript Basic Gruntfile">/*global module:false*/
module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    // Metadata.
    pkg: grunt.file.readJSON('package.json'),
    banner: '/*! &lt;%= pkg.title || pkg.name %&gt; - v&lt;%= pkg.version %&gt; - ' +
      '&lt;%= grunt.template.today("yyyy-mm-dd") %&gt;\n' +
      '&lt;%= pkg.homepage ? "* " + pkg.homepage + "\\n" : "" %&gt;' +
      '* Copyright (c) &lt;%= grunt.template.today("yyyy") %&gt; &lt;%= pkg.author.name %&gt;;' +
      ' Licensed &lt;%= _.pluck(pkg.licenses, "type").join(", ") %&gt; */\n',
    // Task configuration.
    concat: {
      options: {
        banner: '&lt;%= banner %&gt;',
        stripBanners: true
      },
      dist: {
        src: ['lib/&lt;%= pkg.name %&gt;.js'],
        dest: 'dist/&lt;%= pkg.name %&gt;.js'
      }
    },
    uglify: {
      options: {
        banner: '&lt;%= banner %&gt;'
      },
      dist: {
        src: '&lt;%= concat.dist.dest %&gt;',
        dest: 'dist/&lt;%= pkg.name %&gt;.min.js'
      }
    },
    jshint: {
      options: {
        curly: true,
        eqeqeq: true,
        immed: true,
        latedef: true,
        newcap: true,
        noarg: true,
        sub: true,
        undef: true,
        unused: true,
        boss: true,
        eqnull: true,
        browser: true,
        globals: {}
      },
      gruntfile: {
        src: 'Gruntfile.js'
      },
      lib_test: {
        src: ['lib/**/*.js', 'test/**/*.js']
      }
    },
    qunit: {
      files: ['test/**/*.html']
    },
    watch: {
      gruntfile: {
        files: '&lt;%= jshint.gruntfile.src %&gt;',
        tasks: ['jshint:gruntfile']
      },
      lib_test: {
        files: '&lt;%= jshint.lib_test.src %&gt;',
        tasks: ['jshint:lib_test', 'qunit']
      }
    }
  });

  // These plugins provide necessary tasks.
  grunt.loadNpmTasks('grunt-contrib-concat');
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-qunit');
  grunt.loadNpmTasks('grunt-contrib-jshint');
  grunt.loadNpmTasks('grunt-contrib-watch');

  // Default task.
  grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);

};
</code></pre>

<h4><code>load-grunt-tasks</code> vs <code>load-grunt-config</code></h4>

<p>The original basic Gruntfile (after <code>grunt-init</code> step) manually load our Grunt plugins, as</p>

<pre><code class="javascript">grunt.loadNpmTasks('grunt-contrib-concat');
grunt.loadNpmTasks('grunt-contrib-uglify');
grunt.loadNpmTasks('grunt-contrib-imagemin');
</code></pre>

<p>If you now uninstall the plugin via <code>npm</code> and update your <code>package.json</code>, but forget to update your <code>Gruntfile</code>, your build will break.
With <code>load-grunt-tasks</code> plugin, you can collapse that down to the following one-liner:</p>

<pre><code class="javascript">require('load-grunt-tasks')(grunt);
</code></pre>

<p>After requiring the plugin, it will analyze your package.json file, determine which of the dependencies are Grunt plugins and load them all automatically.
<code>load-grunt-tasks</code> shrunk your Gruntfile in code and complexity a little, but task configurations still remain in the Gruntfile (defined in <code>grunt.initConfig</code>).
As you configure a large application, it will still become a very large file.</p>

<p>This is when <code>load-grunt-config</code> comes into play.
<code>load-grunt-config</code> lets you break up your Gruntfile config by task.
With <code>load-grunt-config</code>, your <code>Gruntfile</code> may look like this:</p>

<pre><code class="javascript Gruntfile with load-grunt-config">module.exports = function(grunt) {

  var path = require('path');  
  const appOptions = {
      data: {},
      configPath: [
          path.join(process.cwd(), '/grunt/tasks')
      ]
  };

  require('time-grunt')(grunt);
  require('load-grunt-config')(grunt, appOptions);

};
</code></pre>

<p>Note that <code>load-grunt-config</code> also includes <code>load-grunt-tasks</code>&rsquo;s functionality.
The task configurations live in files in folder <code>./grunt/tasks</code>.
By default, <code>./grunt</code> folder is used but, in this example, using a custom path is demonstrated.
In other words, our directory structure should be like this:</p>

<pre><code class="plain Directory structure">- current_project/
-- Gruntfile
-- grunt/tasks/
---- concat.js
---- uglify.js
---- imagemin.js
</code></pre>

<p>The task configuration for each task is defined in respective file name.
For example, task <code>concat</code> is defined in &ldquo;grunt/tasks/concat.js&rdquo;:</p>

<pre><code class="javascript grunt/tasks/concat.js">module.exports = {
  options: {
    banner: '&lt;%= banner %&gt;',
    stripBanners: true
  },
  dist: {
    src: ['lib/&lt;%= pkg.name %&gt;.js'],
    dest: 'dist/&lt;%= pkg.name %&gt;.js'
  }
};
</code></pre>

<p>The list of registered task aliases such as <code>default</code> is defined in <code>aliases.js</code> file.</p>

<pre><code class="javascript grunt/tasks/aliases.js">module.exports = function(grunt, appOptions) {
    var buildList = [
        'jshint',
        'qunit',
        'concat',
        'uglify'
    ];

    return {
        default: ['build'],
        build: buildList,
        test: ['jslint']
    };
};
</code></pre>

<h4>References</h4>

<ul>
<li>Safari: Introducing Grunt: the JavaScript task runner</li>
<li>Common Grunt plugins:

<ul>
<li><a href="http://firstandthird.github.io/load-grunt-config/">load-grunt-config</a>: key plugin to keep Gruntfile organized.</li>
<li><a href="https://www.npmjs.com/package/grunt-contrib-concat">concat</a></li>
<li>Unit Testing: <a href="https://www.npmjs.com/package/grunt-contrib-qunit">qunit</a></li>
<li>Image optimization: imagemin</li>
<li>Deploying: deploy</li>
<li>Chaining: concurrent</li>
</ul>
</li>
<li><a href="https://gruntjs.com/project-scaffolding">Project scaffolding with <code>grunt-init</code></a>

<ul>
<li>grunt-init-commonjs - Create a commonjs module, including Nodeunit unit tests.</li>
<li>grunt-init-gruntfile - Create a basic Gruntfile.</li>
<li>grunt-init-gruntplugin - Create a Grunt plugin, including Nodeunit unit tests.</li>
<li>grunt-init-jquery - Create a jQuery plugin, including QUnit unit tests.</li>
<li><a href="https://github.com/gruntjs/grunt-init-node">grunt-init-node</a> - Create a Node.js module, including Nodeunit unit tests.</li>
</ul>
</li>
</ul>


<h3>Add unit testing</h3>

<pre><code class="plain Unit testing with Jasmine"># Add Jasmine to your package.json
npm install --save-dev jasmine

# Initialize Jasmine in your project
./node_modules/.bin/jasmine init

# Set jasmine as your test script in your package.json
"scripts": { "test": "jasmine" }

# Run your tests
npm test
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Getting Started With MEAN Stack]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/09/09/tutorial-mean-stack/"/>
    <updated>2016-09-09T21:43:51-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/09/09/tutorial-mean-stack</id>
    <content type="html"><![CDATA[<p>An example web application with MongoDB, ExpressJS, and NodeJS.</p>

<!--more-->


<h3>Final application</h3>

<p>I would go through the final version of the example application before going from the ground up.
You can find the final example application <a href="https://github.com/tdongsi/mongodb/tree/develop/DevInt/rest">here</a>.
To run it:</p>

<ul>
<li>Make sure that MongoDB are running with port 27017.

<ul>
<li>In Windows, run MongoDB as: <code>mongod.exe --dbpath C:\data\db</code></li>
</ul>
</li>
<li>Change directory to the <code>rest</code> folder.</li>
<li><code>npm install</code></li>
<li><code>node index.js</code></li>
<li>From the browser or <a href="https://www.getpostman.com/">POSTman</a> application, run HTTP methods against <code>http://localhost:3000/api/widgets/</code>.</li>
</ul>


<h4>References</h4>

<ul>
<li>MongoDB installation

<ul>
<li><a href="http://stackoverflow.com/questions/20796714/what-is-the-way-to-start-mongo-db-from-windows-7-64-bit">Windows</a>.

<ul>
<li>Note that Windows 7 requires <a href="https://support.microsoft.com/en-us/kb/2731284">a hotfix from Microsoft</a>, based on <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/">MongoDB instruction</a>.</li>
</ul>
</li>
<li>Mac: <code>brew install mongodb</code> works for me.</li>
</ul>
</li>
<li><a href="https://www.getpostman.com/">https://www.getpostman.com/</a></li>
</ul>


<h3>First version</h3>

<h3>Second version: Database separation</h3>

<h3>Third version: Routing</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Quick Recap]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/09/05/javascript-quick-recap/"/>
    <updated>2016-09-05T22:34:53-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/09/05/javascript-quick-recap</id>
    <content type="html"><![CDATA[<p>What to review before a JavaScript interview.</p>

<!--more-->


<h3>Basic</h3>

<p>Types in Javascript:</p>

<ul>
<li>number: 2, 3.5</li>
<li>string: &lsquo;3&rsquo;, &ldquo;3&rdquo;</li>
<li>boolean: true, false</li>
<li>object: e.g., typeof console</li>
<li>function: e.g., typeof console.log</li>
</ul>


<h3>Advanced</h3>

<p>TODO</p>

<h3>References</h3>

<p>Library documentation</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math</a></li>
</ul>


<p>Video courses</p>

<ul>
<li>Pluralsight: Learning to Program (with Node.JS) (Beginner)</li>
<li>Safari: Learning Path: Beginning JavaScript

<ul>
<li>Safari: Beginning Programming with JavaScript (Beginner)</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
