<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Archived Blog Posts]]></title>
  <link href="http://tdongsi.github.io/javascript/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/javascript/"/>
  <updated>2021-03-13T03:02:09-08:00</updated>
  <id>http://tdongsi.github.io/javascript/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Question Bank]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/09/06/question-bank/"/>
    <updated>2017-09-06T22:34:25-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/09/06/question-bank</id>
    <content type="html"><![CDATA[<p>Extracted from this <a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions">Github</a> on September 6th 2016.</p>

<!--more-->


<h1>Front-end Job Interview Questions</h1>

<p>This file contains a number of front-end interview questions that can be used when vetting potential candidates. It is by no means recommended to use every single question here on the same candidate (that would take hours). Choosing a few items from this list should help you vet the intended skills you require.</p>

<p><strong>Note:</strong> Keep in mind that many of these questions are open-ended and could lead to interesting discussions that tell you more about the person&rsquo;s capabilities than a straight answer would.</p>

<h2>External links</h2>

<ul>
<li><a href="https://www.reddit.com/r/cscareerquestions/comments/50qnvr/how_to_prepare_for_a_frontend_engineering/">reddit</a></li>
</ul>


<h2>Table of Contents</h2>

<ol>
<li><a href="#general-questions">General Questions</a></li>
<li><a href="#html-questions">HTML Questions</a></li>
<li><a href="#css-questions">CSS Questions</a></li>
<li><a href="#js-questions">JS Questions</a></li>
<li><a href="#testing-questions">Testing Questions</a></li>
<li><a href="#performance-questions">Performance Questions</a></li>
<li><a href="#network-questions">Network Questions</a></li>
<li><a href="#coding-questions">Coding Questions</a></li>
<li><a href="#fun-questions">Fun Questions</a></li>
</ol>


<h4>General Questions:</h4>

<ul>
<li>What did you learn yesterday/this week?</li>
<li>What excites or interests you about coding?</li>
<li>What is a recent technical challenge you experienced and how did you solve it?</li>
<li>What UI, Security, Performance, SEO, Maintainability or Technology considerations do you make while building a web application or site?</li>
<li>Talk about your preferred development environment.</li>
<li>Which version control systems are you familiar with?</li>
<li>Can you describe your workflow when you create a web page?</li>
<li>If you have 5 different stylesheets, how would you best integrate them into the site?</li>
<li>Can you describe the difference between progressive enhancement and graceful degradation?</li>
<li>How would you optimize a website&rsquo;s assets/resources?</li>
<li>How many resources will a browser download from a given domain at a time?

<ul>
<li>What are the exceptions?</li>
</ul>
</li>
<li>Name 3 ways to decrease page load (perceived or actual load time).</li>
<li>If you jumped on a project and they used tabs and you used spaces, what would you do?</li>
<li>Describe how you would create a simple slideshow page.</li>
<li>If you could master one technology this year, what would it be?</li>
<li>Explain the importance of standards and standards bodies.</li>
<li>What is Flash of Unstyled Content? How do you avoid FOUC?</li>
<li>Explain what ARIA and screenreaders are, and how to make a website accessible.</li>
<li>Explain some of the pros and cons for CSS animations versus JavaScript animations.</li>
<li>What does CORS stand for and what issue does it address?</li>
</ul>


<h4>HTML Questions:</h4>

<ul>
<li>What does a <code>doctype</code> do?</li>
<li>What&rsquo;s the difference between full standards mode, almost standards mode and quirks mode?</li>
<li>What&rsquo;s the difference between HTML and XHTML?</li>
<li>Are there any problems with serving pages as <code>application/xhtml+xml</code>?</li>
<li>How do you serve a page with content in multiple languages?</li>
<li>What kind of things must you be wary of when design or developing for multilingual sites?</li>
<li>What are <code>data-</code> attributes good for?</li>
<li>Consider HTML5 as an open web platform. What are the building blocks of HTML5?</li>
<li>Describe the difference between a <code>cookie</code>, <code>sessionStorage</code> and <code>localStorage</code>.</li>
<li>Describe the difference between <code>&lt;script&gt;</code>, <code>&lt;script async&gt;</code> and <code>&lt;script defer&gt;</code>.</li>
<li>Why is it generally a good idea to position CSS <code>&lt;link&gt;</code>s between <code>&lt;head&gt;&lt;/head&gt;</code> and JS <code>&lt;script&gt;</code>s just before <code>&lt;/body&gt;</code>? Do you know any exceptions?</li>
<li>What is progressive rendering?</li>
<li>Have you used different HTML templating languages before?</li>
</ul>


<h4>CSS Questions:</h4>

<ul>
<li>What is the difference between classes and IDs in CSS?</li>
<li>What&rsquo;s the difference between &ldquo;resetting&rdquo; and &ldquo;normalizing&rdquo; CSS? Which would you choose, and why?</li>
<li>Describe Floats and how they work.</li>
<li>Describe z-index and how stacking context is formed.</li>
<li>Describe BFC(Block Formatting Context) and how it works.</li>
<li>What are the various clearing techniques and which is appropriate for what context?</li>
<li>Explain CSS sprites, and how you would implement them on a page or site.</li>
<li>What are your favourite image replacement techniques and which do you use when?</li>
<li>How would you approach fixing browser-specific styling issues?</li>
<li>How do you serve your pages for feature-constrained browsers?

<ul>
<li>What techniques/processes do you use?</li>
</ul>
</li>
<li>What are the different ways to visually hide content (and make it available only for screen readers)?</li>
<li>Have you ever used a grid system, and if so, what do you prefer?</li>
<li>Have you used or implemented media queries or mobile specific layouts/CSS?</li>
<li>Are you familiar with styling SVG?</li>
<li>How do you optimize your webpages for print?</li>
<li>What are some of the &ldquo;gotchas&rdquo; for writing efficient CSS?</li>
<li>What are the advantages/disadvantages of using CSS preprocessors?

<ul>
<li>Describe what you like and dislike about the CSS preprocessors you have used.</li>
</ul>
</li>
<li>How would you implement a web design comp that uses non-standard fonts?</li>
<li>Explain how a browser determines what elements match a CSS selector.</li>
<li>Describe pseudo-elements and discuss what they are used for.</li>
<li>Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.</li>
<li>What does <code>* { box-sizing: border-box; }</code> do? What are its advantages?</li>
<li>List as many values for the display property that you can remember.</li>
<li>What&rsquo;s the difference between inline and inline-block?</li>
<li>What&rsquo;s the difference between a relative, fixed, absolute and statically positioned element?</li>
<li>The &lsquo;C&rsquo; in CSS stands for Cascading.  How is priority determined in assigning styles (a few examples)?  How can you use this system to your advantage?</li>
<li>What existing CSS frameworks have you used locally, or in production? How would you change/improve them?</li>
<li>Have you played around with the new CSS Flexbox or Grid specs?</li>
<li>How is responsive design different from adaptive design?</li>
<li>Have you ever worked with retina graphics? If so, when and what techniques did you use?</li>
<li>Is there any reason you&rsquo;d want to use <code>translate()</code> instead of <em>absolute positioning</em>, or vice-versa? And why?</li>
</ul>


<h4>JS Questions:</h4>

<ul>
<li>Explain event delegation</li>
<li>Explain how <code>this</code> works in JavaScript</li>
<li>Explain how prototypal inheritance works</li>
<li>What do you think of AMD vs CommonJS?</li>
<li>Explain why the following doesn&rsquo;t work as an IIFE: <code>function foo(){ }();</code>.

<ul>
<li>What needs to be changed to properly make it an IIFE?</li>
</ul>
</li>
<li>What&rsquo;s the difference between a variable that is: <code>null</code>, <code>undefined</code> or undeclared?

<ul>
<li>How would you go about checking for any of these states?</li>
</ul>
</li>
<li>What is a closure, and how/why would you use one?</li>
<li>What&rsquo;s a typical use case for anonymous functions?</li>
<li>How do you organize your code? (module pattern, classical inheritance?)</li>
<li>What&rsquo;s the difference between host objects and native objects?</li>
<li>Difference between: <code>function Person(){}</code>, <code>var person = Person()</code>, and <code>var person = new Person()</code>?</li>
<li>What&rsquo;s the difference between <code>.call</code> and <code>.apply</code>?</li>
<li>Explain <code>Function.prototype.bind</code>.</li>
<li>When would you use <code>document.write()</code>?</li>
<li>What&rsquo;s the difference between feature detection, feature inference, and using the UA string?</li>
<li>Explain Ajax in as much detail as possible.</li>
<li>What are the advantages and disadvantages of using Ajax?</li>
<li>Explain how JSONP works (and how it&rsquo;s not really Ajax).</li>
<li>Have you ever used JavaScript templating?

<ul>
<li>If so, what libraries have you used?</li>
</ul>
</li>
<li>Explain &ldquo;hoisting&rdquo;.</li>
<li>Describe event bubbling.</li>
<li>What&rsquo;s the difference between an &ldquo;attribute&rdquo; and a &ldquo;property&rdquo;?</li>
<li>Why is extending built-in JavaScript objects not a good idea?</li>
<li>Difference between document load event and document DOMContentLoaded event?</li>
<li>What is the difference between <code>==</code> and <code>===</code>?</li>
<li>Explain the same-origin policy with regards to JavaScript.</li>
<li>Make this work:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">duplicate</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]);</span> <span class="c1">// [1,2,3,4,5,1,2,3,4,5]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Why is it called a Ternary expression, what does the word &ldquo;Ternary&rdquo; indicate?</li>
<li>What is <code>"use strict";</code>? what are the advantages and disadvantages to using it?</li>
<li>Create a for loop that iterates up to <code>100</code> while outputting <strong>&ldquo;fizz&rdquo;</strong> at multiples of <code>3</code>, <strong>&ldquo;buzz&rdquo;</strong> at multiples of <code>5</code> and <strong>&ldquo;fizzbuzz&rdquo;</strong> at multiples of <code>3</code> and <code>5</code></li>
<li>Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?</li>
<li>Why would you use something like the <code>load</code> event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?</li>
<li>Explain what a single page app is and how to make one SEO-friendly.</li>
<li>What is the extent of your experience with Promises and/or their polyfills?</li>
<li>What are the pros and cons of using Promises instead of callbacks?</li>
<li>What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?</li>
<li>What tools and techniques do you use debugging JavaScript code?</li>
<li>What language constructions do you use for iterating over object properties and array items?</li>
<li>Explain the difference between mutable and immutable objects.

<ul>
<li>What is an example of an immutable object in JavaScript?</li>
<li>What are the pros and cons of immutability?</li>
<li>How can you achieve immutability in your own code?</li>
</ul>
</li>
<li>Explain the difference between synchronous and asynchronous functions.</li>
<li>What is event loop?

<ul>
<li>What is the difference between call stack and task queue?</li>
</ul>
</li>
<li>Explain the differences on the usage of <code>foo</code> between <code>function foo() {}</code> and <code>var foo = function() {}</code></li>
</ul>


<h4>Testing Questions:</h4>

<ul>
<li>What are some advantages/disadvantages to testing your code?</li>
<li>What tools would you use to test your code&rsquo;s functionality?</li>
<li>What is the difference between a unit test and a functional/integration test?</li>
<li>What is the purpose of a code style linting tool?</li>
</ul>


<h4>Performance Questions:</h4>

<ul>
<li>What tools would you use to find a performance bug in your code?</li>
<li>What are some ways you may improve your website&rsquo;s scrolling performance?</li>
<li>Explain the difference between layout, painting and compositing.</li>
</ul>


<h4>Network Questions:</h4>

<ul>
<li>Traditionally, why has it been better to serve site assets from multiple domains?</li>
<li>Do your best to describe the process from the time you type in a website&rsquo;s URL to it finishing loading on your screen.</li>
<li>What are the differences between Long-Polling, Websockets and Server-Sent Events?</li>
<li>Explain the following request and response headers:

<ul>
<li>Diff. between Expires, Date, Age and If-Modified-&hellip;</li>
<li>Do Not Track</li>
<li>Cache-Control</li>
<li>Transfer-Encoding</li>
<li>ETag</li>
<li>X-Frame-Options</li>
</ul>
</li>
<li>What are HTTP methods? List all HTTP methods that you know, and explain them.</li>
</ul>


<h4>Coding Questions:</h4>

<p><em>Question: What is the value of <code>foo</code>?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">+</span> <span class="s1">&#39;20&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Question: How would you make this work?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// 7</span>
</span><span class='line'><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// 7</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Question: What value is returned from the following statement?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;i&#39;m a lasagna hog&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Question: What is the value of <code>window.foo</code>?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">foo</span> <span class="o">||</span> <span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;bar&quot;</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Question: What is the outcome of the two alerts below?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="s2">&quot; World&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">foo</span> <span class="o">+</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">foo</span> <span class="o">+</span> <span class="nx">bar</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Question: What is the value of <code>foo.length</code>?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Question: What is the value of <code>foo.x</code>?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span><span class="nx">n</span><span class="o">:</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span><span class="nx">n</span><span class="o">:</span> <span class="mi">2</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Question: What does the following code print?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;one&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;two&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;three&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Fun Questions:</h4>

<ul>
<li>What&rsquo;s a cool project that you&rsquo;ve recently worked on?</li>
<li>What are some things you like about the developer tools you use?</li>
<li>Who inspires you in the front-end community?</li>
<li>Do you have any pet projects? What kind?</li>
<li>What&rsquo;s your favorite feature of Internet Explorer?</li>
<li>How do you like your coffee?</li>
</ul>


<h4>Contributors:</h4>

<p>This document started in 2009 as a collaboration of <a href="https://twitter.com/paul_irish">@paul_irish</a> <a href="https://twitter.com/bentruyman">@bentruyman</a> <a href="https://twitter.com/cowboy">@cowboy</a> <a href="https://twitter.com/ajpiano">@ajpiano</a>  <a href="https://twitter.com/slexaxton">@SlexAxton</a> <a href="https://twitter.com/boazsender">@boazsender</a> <a href="https://twitter.com/miketaylr">@miketaylr</a> <a href="https://twitter.com/vladikoff">@vladikoff</a> <a href="https://twitter.com/gf3">@gf3</a> <a href="https://twitter.com/jon_neal">@jon_neal</a> <a href="https://twitter.com/sambreed">@sambreed</a> and <a href="https://twitter.com/iansym">@iansym</a>.</p>

<p>It has since received contributions from over <a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/graphs/contributors">100 developers</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins World 2017]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/08/29/jenkins-world-2017/"/>
    <updated>2017-08-29T08:47:04-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/08/29/jenkins-world-2017</id>
    <content type="html"><![CDATA[<p>Some interesting talks in <a href="https://www.cloudbees.com/jenkinsworld/schedule">Jenkins World 2017</a> are summarized in this blog post.</p>

<!--more-->


<h3>Jenkins Pipeline on your Local Box to Reduce Cycle Time</h3>

<p>Interesting proposal (with <strong>demo</strong>, a big plus) to resolve the following problems (added my own experience):</p>

<ul>
<li>Non repeatble builds due to allocated physical slaves with reused workspaces.

<ul>
<li>The idea is equivalent to use Dockerized Jenkins for local job runs before running on central Jenkins.</li>
<li>My current alternative is to use containerized Jenkins slaves using Kubernetes plugin.</li>
</ul>
</li>
<li>Merging of two companies (YNAP + GerritForge)

<ul>
<li>Not applicable. However, for large corporates, two product teams can feel like two companies.</li>
</ul>
</li>
<li>Need for fast feedback

<ul>
<li>Same</li>
</ul>
</li>
<li>One master cannot suit all: central CI not flexible to local team needs.

<ul>
<li>Maybe applicable for team CI and company-wide CI.</li>
</ul>
</li>
<li>Scalability: central CI only handle <code>master</code> job runs instead of multiple feature job runs.</li>
</ul>


<p>Reference:</p>

<ul>
<li><a href="https://github.com/NET-A-PORTER/jenkinsworld-2017-sample-app">Code repo</a></li>
</ul>


<figure class='code'><figcaption><span>default Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cp">#!/bin/env groovy</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">echo</span> <span class="n">env</span><span class="o">.</span><span class="na">JENKINS_URL</span>
</span><span class='line'>    <span class="nf">if</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">JENKINS_URL</span> <span class="o">==~</span> <span class="s">/.*central-pipeline.*/</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">echo</span> <span class="s2">&quot;loading central&quot;</span>
</span><span class='line'>        <span class="n">load</span> <span class="s2">&quot;central/Jenkinsfile&quot;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">echo</span> <span class="s2">&quot;loading local&quot;</span>
</span><span class='line'>        <span class="n">load</span> <span class="s2">&quot;local/Jenkinsfile&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>local Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">{</span> <span class="o">-&gt;</span> <span class="n">docker</span><span class="o">.</span><span class="na">image</span><span class="o">(</span><span class="s1">&#39;slave-sbt&#39;</span><span class="o">).</span><span class="na">inside</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Build&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sh</span> <span class="nf">sbt</span><span class="o">(</span><span class="s1">&#39;compile&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Test&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sh</span> <span class="nf">sbt</span><span class="o">(</span><span class="s1">&#39;test&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Deploy Locally&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sh</span> <span class="nf">sbt</span><span class="o">(</span><span class="s1">&#39;docker:publishLocal&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">def</span> <span class="n">dockerTag</span> <span class="o">=</span> <span class="o">(</span><span class="n">sh</span><span class="o">(</span><span class="nl">script:</span> <span class="s2">&quot;git describe --tags HEAD&quot;</span><span class="o">,</span> <span class="nl">returnStdout:</span> <span class="kc">true</span><span class="o">)).</span><span class="na">trim</span><span class="o">()</span>
</span><span class='line'>            <span class="n">cleanUpOldContainers</span><span class="o">(</span><span class="n">dockerTag</span><span class="o">)</span>
</span><span class='line'>            <span class="n">runContainer</span><span class="o">(</span><span class="n">dockerTag</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">def</span> <span class="n">containerUrl</span> <span class="o">=</span> <span class="n">getRunningContainerURL</span><span class="o">(</span><span class="n">dockerTag</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">echo</span> <span class="s2">&quot;Running on $containerUrl&quot;</span>
</span><span class='line'>            <span class="n">currentBuild</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="s2">&quot;$containerUrl&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Push to GitHub&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">withCredentials</span><span class="o">([[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;UsernamePasswordMultiBinding&#39;</span><span class="o">,</span>
</span><span class='line'>                              <span class="nl">credentialsId:</span> <span class="s1">&#39;github&#39;</span><span class="o">,</span>
</span><span class='line'>                              <span class="nl">usernameVariable:</span> <span class="s1">&#39;USERNAME&#39;</span><span class="o">,</span> <span class="nl">passwordVariable:</span> <span class="s1">&#39;PASSWORD&#39;</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sh</span> <span class="s2">&quot;git branch --list ${env.BRANCH_NAME} || git checkout -b ${env.BRANCH_NAME}&quot;</span>
</span><span class='line'>                <span class="n">sh</span> <span class="s2">&quot;git push -f https://$USERNAME:$PASSWORD@github.com/NET-A-PORTER/jenkinsworld-2017-sample-app HEAD:refs/heads/${env.BRANCH_NAME}&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>central Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">{</span> <span class="o">-&gt;</span> <span class="n">docker</span><span class="o">.</span><span class="na">image</span><span class="o">(</span><span class="s1">&#39;slave-sbt&#39;</span><span class="o">).</span><span class="na">inside</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Build&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sh</span> <span class="nf">sbt</span><span class="o">(</span><span class="s1">&#39;compile&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Creating Docker container&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sh</span> <span class="nf">sbt</span><span class="o">(</span><span class="s1">&#39;docker:stage&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">BRANCH_NAME</span> <span class="o">==</span> <span class="s2">&quot;master&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Deploy to Heroku&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">withCredentials</span><span class="o">([[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;UsernamePasswordMultiBinding&#39;</span><span class="o">,</span>
</span><span class='line'>                                  <span class="nl">credentialsId:</span> <span class="s1">&#39;heroku&#39;</span><span class="o">,</span>
</span><span class='line'>                                  <span class="nl">usernameVariable:</span> <span class="s1">&#39;USERNAME&#39;</span><span class="o">,</span> <span class="nl">passwordVariable:</span> <span class="s1">&#39;PASSWORD&#39;</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">sh</span> <span class="s2">&quot;echo &#39;machine git.heroku.com login $USERNAME password $PASSWORD&#39; &gt; ~/.netrc&quot;</span>
</span><span class='line'>                    <span class="n">sh</span> <span class="s2">&quot;chmod 600 ~/.netrc&quot;</span>
</span><span class='line'>                    <span class="n">sh</span> <span class="s2">&quot;git push -f https://git.heroku.com/jenkinsworld-2017-sample-app.git HEAD:master&quot;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="nf">sbt</span><span class="o">(</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;sbt -no-colors $target&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Managing Jenkins with CloudBees Jenkins Team</h3>

<p>CloudBees Jenkins is the Enterprise version of Jenkins, as opposed to Open-Source Jenkins.
This enterprise version offers the following features:</p>

<ul>
<li>Beekeeper Upgrade Assistant: Plugin upgrade compatibility, Compliance report.</li>
<li>Upgrade simulations to make sure the upgrade is compatible with current jobs/plugins.</li>
</ul>


<p>Like many other tools presented in the conference, you can do many &ldquo;awesome&rdquo; things <strong>IF</strong> you pay for it.
The only problem is if you have the budget to pay for it.</p>

<h3>Let&rsquo;s build a Jenkins Pipeline</h3>

<p>Basic tutorial on Jenkinsfile with Declarative syntax.
Not that interesting if you are already familiar with Jenkinsfile.</p>

<ul>
<li><a href="https://www.slideshare.net/secret/5d85kTqLfjOgdC">Slides</a></li>
<li><a href="https://gist.github.com/ericlong/25fd60f197f6c4c7b8f265af7a351e75">Code snippets</a></li>
</ul>


<h3>Developing Pipeline Libraries Locally</h3>

<p>If you have ever tried developing Pipeline Libraries, you may have noticed how long it takes to deploy a new version to server to discover just another syntax error. Oleg will show how to edit and test Pipeline libraries locally before committing to the repository (with Configuration-as-Code and Docker).</p>

<ul>
<li><a href="https://hub.docker.com/r/onenashev/demo-jenkins-config-as-code/">DockerHub repo</a></li>
<li><a href="https://github.com/oleg-nenashev/demo-jenkins-config-as-code">Github repo</a></li>
</ul>


<!-- Photos:
IMG_1097
IMG_1098
IMG_1099
-->


<h3>Securing a Jenkins Instance</h3>

<p>See <a href="http://tdongsi.github.io/javascript/blog/2017/09/05/securing-jenkins-with-nginx/">this post</a>.</p>

<!-- Photos:
IMG_[1100..1107]
-->


<h3>Scaling Jenkins with Kubernetes</h3>

<p>We are already using Kubernetes plugin in production.
The talk mostly recaps how to use the plugin.</p>

<ul>
<li><a href="https://github.com/jenkinsci/kubernetes-plugin/tree/master/examples">Examples</a>

<ul>
<li>Interesting examples include <a href="https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/multi-container.groovy">multi-container</a>, <a href="https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/selenium.groovy">selenium</a>.</li>
</ul>
</li>
</ul>


<!-- Photos:
IMG_[1117..1121]
-->


<h3>Declarative Pipelines in Jenkins</h3>

<p>New features and improvements in Declarative Jenkinsfile are announced.
Those include:</p>

<ul>
<li><code>changelog</code>: examines the commit log messages with a regular expression.</li>
<li><code>changeset</code>: the affected file paths in the changelog.</li>
</ul>


<!-- Photos:
IMG_[1123..1134]
-->


<h3>Codifying the Build and Release Process with a Jenkins Pipeline Shared Library</h3>

<p>Almost all of the Jenkins workflows practiced at FireEye are already implemented in our Jenkins.
It&rsquo;s assuring to know that we are using the best practices and not way behind the pack.
However, I got a glimpse of potential struggles (mostly from inertia) migrating from a legacy Jenkins system (1.x) to Jenkinsfile-based system (2.x).</p>

<!-- Photos:
IMG_[1135..1138]
-->




<!-- Pimp my Blue Ocean
Photos:
IMG_[1139..1144]
-->


<h3>Mozilla’s Declarative + Shared Libraries Setup</h3>

<p>How Mozilla is using <strong>Declarative</strong> Pipelines and shared libraries together.</p>

<ul>
<li><a href="https://github.com/mozilla/fxtest-jenkins-pipeline">Github repo</a></li>
<li><a href="https://github.com/mozilla/mozillians-tests/blob/master/Jenkinsfile">Example Jenkinsfile</a></li>
</ul>


<!-- Photos:
IMG_[1145..1150]
-->


<h3>Pipelines At Scale: How Big, How Fast, How Many?</h3>

<p>Interesting point: Each pipeline step is similar to a database transaction: each step requires an atomic record in case of Jenkins restart.
Therefore, it is better to have a large enough transaction than multiple small transactions (e.g., <code>sh</code> step).</p>

<p>For comprehensive study of this topic (Jenkins performance), there are many articles/blog posts written by same author (Sam Van Oort).</p>

<!-- Photos:
IMG_[1151..1163]
-->


<h3>JenkinsPipelineUnit: Test your Continuous Delivery Pipeline</h3>

<p>JenkinsPipelineUnit allows unit testing the Jenkinsfile locally by mocking the Pipeline steps.
In my opinion, it seems only useful for reducing the <strong>syntax</strong> mistakes when developing Jenkinsfile OR global shared library.
You still have to verify functionality in a real Jenkins system.
Its compatibility with Declarative syntax is also questionable, admitted by the speakers/authors.
In addition, it is NOT for developling a Jenkins plugin. In that case, use JenkinsRule.</p>

<ul>
<li><a href="https://github.com/lesfurets/JenkinsPipelineUnit">Github repo</a></li>
</ul>


<!-- Photos:
IMG_[1164..1170]
-->


<h3>Securing a Jenkins Instance</h3>

<p>Demo &ldquo;Securing a Jenkins Instance&rdquo; at Jenkins Booth in Jenkins World 2017 by Claudiu Guiman.</p>

<blockquote><p>A set of minimum steps every Jenkins Admin should follow so his public-facing Jenkins instance doesn’t turn into a Bitcoin mine.</p></blockquote>




<figure class='code'><figcaption><span>nginx configuration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name demo-001.eastus.cloudapp.azure.com;
</span><span class='line'>    location / {
</span><span class='line'>        proxy_set_header        Host $host:$server_port;
</span><span class='line'>        proxy_set_header        X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header        X-Forwarded-Proto $scheme;
</span><span class='line'>        proxy_pass              http://localhost:8080;
</span><span class='line'>        proxy_redirect          http://localhost:8080 http://demo-001.eastus.cloudapp.azure.com;
</span><span class='line'>        proxy_read_timeout      90;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # block requests to /cli
</span><span class='line'>    location /cli {
</span><span class='line'>        deny all;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # block requests to /login
</span><span class='line'>    location ~ /login* {
</span><span class='line'>        deny all;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Running nginx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp ~/demo/default /etc/nginx/sites-enabled/default
</span><span class='line'>$ sudo service nginx restart
</span><span class='line'>$ sudo ufw deny 8080</span></code></pre></td></tr></table></div></figure>


<p>If your Jenkins is hosted in AWS/Google Cloud, you should consider setting this up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for JavaScript Programming Test]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/06/21/tutorial-quick-start-for-javascript-programming-test/"/>
    <updated>2017-06-21T00:58:03-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/06/21/tutorial-quick-start-for-javascript-programming-test</id>
    <content type="html"><![CDATA[<p>For timed programming tests, new test-takers usually underestimate how short two and a half hours can be (more <a href="https://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test/">here</a>).
This post lists out steps to get started quickly for a JavaScript programming test, using React.</p>

<!--more-->


<p>Using this boiler plate <a href="https://github.com/davezuko/react-redux-starter-kit">https://github.com/davezuko/react-redux-starter-kit</a></p>

<p>For example, build the followings:</p>

<ul>
<li>As a player I want to move my objects around the screen using the keyboard (or any preferred input device)</li>
<li>If the object meets other objects in the screen, give some feedback.</li>
</ul>


<h3>Start an empty project</h3>

<figure class='code'><figcaption><span>Starting a Node project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># For new machine
</span><span class='line'>nvm install --lts
</span><span class='line'>
</span><span class='line'># Init by creating package.json file
</span><span class='line'>npm init
</span><span class='line'># Answer questions to create package.json file
</span><span class='line'>
</span><span class='line'># Adding grunt
</span><span class='line'>npm install grunt --save-dev
</span><span class='line'>npm install grunt-jslint --save-dev
</span><span class='line'>npm install load-grunt-tasks --save-dev
</span><span class='line'>
</span><span class='line'># Initalizing Gruntfile
</span><span class='line'>npm install grunt-init -g
</span><span class='line'>grunt-init gruntfile
</span><span class='line'># grunt-init node</span></code></pre></td></tr></table></div></figure>


<p>At the end of these steps, you have a basic <code>package.json</code> and <code>Gruntfile</code>.
For large scale project, you may want to further <a href="http://tdongsi.github.io/blog/2017/09/15/keep-gruntfile-clean-with-load-grunt-config/">clean up your Gruntfile using <code>load-grunt-config</code> plugin</a>.</p>

<h3>Add unit testing</h3>

<figure class='code'><figcaption><span>Unit testing with Jasmine</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Add Jasmine to your package.json
</span><span class='line'>npm install --save-dev jasmine
</span><span class='line'>
</span><span class='line'># Initialize Jasmine in your project
</span><span class='line'>./node_modules/.bin/jasmine init
</span><span class='line'>
</span><span class='line'># Set jasmine as your test script in your package.json
</span><span class='line'>"scripts": { "test": "jasmine" }
</span><span class='line'>
</span><span class='line'># Run your tests
</span><span class='line'>npm test</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Coverage: Istanbul & Nyc]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/05/23/code-coverage-instanbul-slash-nyc/"/>
    <updated>2017-05-23T21:54:01-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/05/23/code-coverage-instanbul-slash-nyc</id>
    <content type="html"><![CDATA[<p>Code coverage for NodeJS projects.</p>

<!--more-->


<h3>Settings in <code>.nycrc</code> file</h3>

<p>What is the standard code coverage settings look like?</p>

<figure class='code'><figcaption><span>Example nycrc file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;reporter&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;text-summary&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;lcov&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;lines&quot;</span><span class="p">:</span> <span class="mi">46</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;statements&quot;</span><span class="p">:</span> <span class="mi">47</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;functions&quot;</span><span class="p">:</span> <span class="mi">44</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;branches&quot;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;exclude&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;**/node_modules/**&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;**/grunt/**&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;**/public/**&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;**/test/**&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;i18n-express.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;newrelic.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;app.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Gruntfile.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scripts/**&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;build/**&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;extension&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;.jsx&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;babel/register&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;all&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;check-coverage&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;cache&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;report-dir&quot;</span><span class="p">:</span> <span class="s2">&quot;./build/coverage&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>nyc</code> settings</h3>

<p>Is it possible to specify the custom location of <code>.nycrc</code> file? Short answer: NO. Long answer: Depending on the custom location in question.</p>

<p>nycrc support is implemented in <a href="https://github.com/istanbuljs/nyc/pull/391/files">this PR</a>.
The relevant code for processing <code>.nycrc</code> file is in <a href="https://github.com/istanbuljs/nyc/blob/master/lib/config-util.js">this file</a>:</p>

<figure class='code'><figcaption><span>.nycrc processing, extracted on May 20th 2017</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">findUp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;find-up&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// load config from a cascade of sources:</span>
</span><span class='line'><span class="c1">// * command line arguments</span>
</span><span class='line'><span class="c1">// * package.json</span>
</span><span class='line'><span class="c1">// * .nycrc</span>
</span><span class='line'><span class="nx">Config</span><span class="p">.</span><span class="nx">loadConfig</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">argv</span><span class="p">,</span> <span class="nx">cwd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">cwd</span> <span class="o">=</span> <span class="nx">cwd</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NYC_CWD</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pkgPath</span> <span class="o">=</span> <span class="nx">findUp</span><span class="p">.</span><span class="nx">sync</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">cwd</span><span class="o">:</span> <span class="nx">cwd</span><span class="p">})</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">rcPath</span> <span class="o">=</span> <span class="nx">findUp</span><span class="p">.</span><span class="nx">sync</span><span class="p">(</span><span class="s1">&#39;.nycrc&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">cwd</span><span class="o">:</span> <span class="nx">cwd</span><span class="p">})</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">rcConfig</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">rcPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">rcConfig</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">rcPath</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://www.npmjs.com/package/find-up"><code>find-up</code></a> returns valid path if the file <code>.nycrc</code> is in the parent folders.
In Jenkins environment, it means that if you can place that file into a parent folder of the workspace, then <code>.nycrc</code> can be found.</p>

<p>The commandline arguments and their default values can be retrieved from <code>nyc help</code>, as shown belows:</p>

<figure class='code'><figcaption><span>Installing nyc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:learn_grunt tdongsi$ npm i nyc -g
</span><span class='line'>/Users/tdongsi/.nvm/versions/node/v4.6.1/bin/nyc -&gt; /Users/tdongsi/.nvm/versions/node/v4.6.1/lib/node_modules/nyc/bin/nyc.js
</span><span class='line'>nyc@10.3.2 /Users/tdongsi/.nvm/versions/node/v4.6.1/lib/node_modules/nyc
</span><span class='line'>
</span><span class='line'>mymac:learn_grunt tdongsi$ which nyc
</span><span class='line'>/Users/tdongsi/.nvm/versions/node/v4.6.1/bin/nyc
</span><span class='line'>
</span><span class='line'>mymac:learn_grunt tdongsi$ nyc help config
</span><span class='line'>nyc [command] [options]
</span><span class='line'>
</span><span class='line'>run your tests with the nyc bin to instrument them with coverage</span></code></pre></td></tr></table></div></figure>


<h4>Related problem</h4>

<p>The problem with code coverage thresholds in <code>.nycrc</code> is explained in <a href="https://stackoverflow.com/questions/44148412/increase-code-coverage-gate-for-protected-master-branch-in-github-enterprise">this question</a>.
In summary, if a person wants to increase code coverage threshold in <code>.nycrc</code> file sitting in a Github repository with protected branches, the PR cannot be merged because the test run fails.
The easy way to work around this is to disable &ldquo;Include adminstrators&rdquo; under &ldquo;Require status checks to pass before merging&rdquo; in Repository settings -> Branches -> master, then add the manager into the Admin group.
However, in this approach, sneaky developers can still reduce the code coverage threshold in their branches and merge their PRs.
For larger teams, the file <code>.nycrc</code> should be separated from the repository in question.
Instead, that file should be included into the Docker image for running that job (assumption: containerized Jenkins system with Kubernetes plugin) and symlinked to workspace folder or its parent directory accordingly.
See above and <code>find-up</code> package for explanations.</p>

<h3>References</h3>

<ul>
<li><a href="https://github.com/istanbuljs/nyc">Istanbul nyc</a></li>
<li><a href="https://github.com/istanbuljs/nyc/pull/391/files">nycrc implementation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kubernetes: Kube-router]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/05/15/kubernetes-kube-router/"/>
    <updated>2017-05-15T10:52:34-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/05/15/kubernetes-kube-router</id>
    <content type="html"><![CDATA[<p>Kubernetes is one of the <a href="http://www.infoworld.com/article/3118345/cloud-computing/why-kubernetes-is-winning-the-container-war.html">most active open-source project</a> right now.
I&rsquo;m trying to keep up with interesting updates from the Kubernetes community.
This <code>kube-router</code> project is one of them although I&rsquo;ve not get an idea how stable or useful it is.</p>

<blockquote><p>Kube-router is a distributed load balancer, firewall and router for Kubernetes. Kube-router can be configured to provide on each cluster node:<br/>* IPVS/LVS based service proxy on each node for ClusterIP and NodePort service types, providing service discovery and load balancing<br/>* an ingress firewall for the pods running on the node as per the defined Kubernetes network policies using iptables and ipset<br/>* a BGP router to advertise and learn the routes to the pod IP's for cross-node pod-to-pod connectivity</p></blockquote>




<!--more-->


<p>A few notes on related works in Kubernetes community:</p>

<ul>
<li>The most obvious one is <code>kube-proxy</code> service, which is included in the standard Kubernetes installations. This <code>kube-router</code> can be a replacement for <code>kube-proxy</code> in the future.</li>
<li>Another related work is <a href="https://github.com/kubernetes/kubernetes/issues/44063">IPVS-based in-cluster service load balancing</a>.
Huawei presented this work at Kubecon 2016.
IIRC, it is implemented as a flag to kube-proxy and considerable performance improvement was reported.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Jenkins Pipeline Shared Libraries]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/03/17/jenkins-pipeline-shared-libraries/"/>
    <updated>2017-03-17T15:38:14-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/03/17/jenkins-pipeline-shared-libraries</id>
    <content type="html"><![CDATA[<p>When you have multiple Pipeline jobs, you often want to share some parts of the Jenkinsfiles between them to keep Jenkinfiles <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>.
A very common use case is that you have many projects that are built in the similar way, such as Nexus authentication step in Gradle build.
One way is to use <a href="https://github.com/jenkinsci/workflow-cps-global-lib-plugin">Workflow plugin</a>.
Comprehensive user documentation can be found in <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/">this section</a> of Jenkins handbook.</p>

<p>In the following sections, we review a couple <strong>older</strong>, but not necessarily worse, ways of updating shared Groovy code which are still used in some Jenkins system.</p>

<!--more-->


<h3>Simple copying</h3>

<p>A quick and dirty way of updating shared Groovy codes in Jenkinsfile is to overwrite Groovy files on Jenkins in its <code>$JENKINS_HOME</code>.
All such Groovy files are stored in <em>$JENKINS_HOME/workflow-libs</em> folder, following this directory structure:</p>

<figure class='code'><figcaption><span>Directory structure of a Shared Library repository</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(root)
</span><span class='line'>+- src                     # Groovy source files
</span><span class='line'>|   +- org
</span><span class='line'>|       +- foo
</span><span class='line'>|           +- Bar.groovy  # for org.foo.Bar class
</span><span class='line'>+- vars
</span><span class='line'>|   +- foo.groovy          # for global 'foo' variable
</span><span class='line'>|   +- foo.txt             # help for 'foo' variable
</span><span class='line'>+- resources               # resource files (external libraries only)
</span><span class='line'>|   +- org
</span><span class='line'>|       +- foo
</span><span class='line'>|           +- bar.json    # static helper data for org.foo.Bar</span></code></pre></td></tr></table></div></figure>


<p>By manually modifying the Groovy files (e.g., <em>vars/foo.groovy</em>) and restarting Jenkins, you can update their behaviors accordingly.
This method is dirty and definitely bad since it requires a Jenkins restart and modifications to Groovy codes are not tracked (and code-reviewed) anywhere.</p>

<h3>Git-based update</h3>

<p>A more scalable alternative for updating Groovy codes is to use <code>git push</code>, exposed by Jenkins.</p>

<p>As a side note, this method is no longer mentioned in documentation, as of March 2017.
In fact, you have to look into a <a href="https://github.com/jenkinsci/workflow-cps-global-lib-plugin/tree/ce1177278d4cb05ac6b01f723177cc4b2e0aec8d">very old commit</a>
or <a href="https://github.com/cloudbees/workflow-plugin/tree/master/cps-global-lib">outdated, unofficial fork</a> to find this method briefly mentioned at all.
It is also occasionally mentioned in support articles such as <a href="https://support.cloudbees.com/hc/en-us/articles/218162277-Unable-to-Clone-workflowLibs">this</a>.</p>

<p>In this method, the directory <em>$JENKINS_HOME/workflow-libs</em> is exposed by Jenkins as a Git repository.
You can deploy new changes to this directory through <code>git push</code> and any such event will trigger Jenkins to recompile Groovy files.
There is no Jenkins restart required for this method, which makes it much more suitable for production Jenkins.
The Git repository is exposed in two endpoints:</p>

<ul>
<li><a href="http://server/jenkins/workflowLibs.git">http://server/jenkins/workflowLibs.git</a> (when your Jenkins is <code>http://server/jenkins/</code>).</li>
<li>ssh://USERNAME@server:PORT/workflowLibs.git (when Jenkins acts as <a href="https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+SSH">an SSH server</a>)</li>
</ul>


<p>This method also means that the shared Jenkins library scripts in Groovy are stored in another Git repository (e.g., &ldquo;shared-lib&rdquo; on Github) and only <code>git push</code> to the <code>workflowLibs.git</code> repository in the event of deployment.
Having the shared scripts in Git allows you to track changes, perform tested deployments, and reuse the same shared library across a large number of instances.</p>

<h4>Jenkinsfile to update global library</h4>

<p>In this Git-based update approach, all Groovy files should be in some Git repository (e.g., &ldquo;shared-lib&rdquo;) with certain directory structure (shown in the last section).
Since Jenkinsfile has been extensively used for creating CI/CD pipelines, it is only appropriate to add a Jenkinsfile for deploying Groovy files in this Git repository to update Jenkins.
The Jenkinsfile for such workflow-libs should be as follows:</p>

<figure class='code'><figcaption><span>Jenkinsfile for deployment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  stage 'Checkout'
</span><span class='line'>  checkout scm
</span><span class='line'>
</span><span class='line'>  if (env.BRANCH_NAME == 'master') {
</span><span class='line'>    stage 'Update'
</span><span class='line'>    println "Updating Jenkins workflow-libs"
</span><span class='line'>    sshagent(['jenkins_ssh_key']) {
</span><span class='line'>      sh """
</span><span class='line'>         git branch master
</span><span class='line'>         git checkout master
</span><span class='line'>         ssh-keyscan -H -p 12222 \${JENKINS_ADDR} &gt;&gt; ~/.ssh/known_hosts
</span><span class='line'>         git remote add jenkins ssh://tdongsi@\${JENKINS_ADDR}:12222/workflowLibs.git
</span><span class='line'>         git push --force jenkins master
</span><span class='line'>      """
</span><span class='line'>    }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Some comments on this Jenkinsfile:</p>

<ul>
<li><code>sshagent(['jenkins_ssh_key'])</code> indicates that the current node/slave is known as <a href="https://wiki.jenkins-ci.org/display/JENKINS/SSH+Agent+Plugin">an SSH agent</a> to Jenkins master, using Jenkins credentials with ID <code>jenkins_ssh_key</code>.</li>
<li><code>git remote add</code> uses the currently checked out Git repo and branch as a remote branch (named &ldquo;jenkins&rdquo;) to the <code>workflowLibs</code> repository.</li>
<li>The <code>workflowLibs</code> repository is managed by Jenkins, exposed at that location <em>ssh://tdongsi@\${JENKINS_ADDR}:12222/workflowLibs.git</em>.</li>
<li>Then we force push any new changes to the Git repository on Jenkins.</li>
</ul>


<p>After the push, the Git repository <code>workflowLibs</code> on Jenkins should have latest change, same as the current &ldquo;shared-lib&rdquo; repository.
Upon a <code>git push</code> event, the Jenkins will automatically update its global library with the latest changes, without the need of restarting.
Note that for this SSH push to work, a public-private key pair must be generated and configured accordingly.</p>

<figure class='code'><figcaption><span>Key pair generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:jenkins tdongsi$ kubectl --namespace=jenkins exec -ti jenkins-ideb4 -- bash
</span><span class='line'>
</span><span class='line'>jenkins@jenkins-4076880321-ideb4:~$ ssh-keygen -t rsa -b 4096 -C "example@gmail.com"
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/var/jenkins_home/.ssh/id_rsa):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:</span></code></pre></td></tr></table></div></figure>


<p>The generated public key should be added to the user via <em>jenkinsurl.com/user/tdongsi/configure</em> URL and private key should be added to the credentials ID <code>jenkins_ssh_key</code>.</p>

<h3>References</h3>

<ul>
<li><a href="https://github.com/cloudbees/workflow-plugin/tree/master/cps-global-lib">Git-based update</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker: Copy File Into a Container]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2017/02/09/docker-copy-file-into-a-container/"/>
    <updated>2017-02-09T15:17:19-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2017/02/09/docker-copy-file-into-a-container</id>
    <content type="html"><![CDATA[<p>In this blog post, we have a running Docker container or a running pod in Kubernetes cluster.
We want to add some files into the running containers to fix some issue, verify, and commit the changes.</p>

<!--more-->


<h3>Best-case scenario: <code>docker cp</code></h3>

<p>The most obvious way is to create a Dockerfile and rebuild the Docker image.
The Dockerfile will look like this:</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM olderImage
</span><span class='line'>ADD myfile /path/myfile
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>However, in this approach, we need to stop the Docker containers, update, and re-run with the new Docker images.
It does not work if we want to work with <strong><em>running</em></strong> containers.
For running containers, the better way to add files into containers is to copy files into containers.
For the more updated versions of Docker (1.8+), the recommended way for copying is to use <a href="https://docs.docker.com/engine/reference/commandline/cp/"><code>docker cp</code> command</a>.</p>

<h3>Copy file directly</h3>

<p><code>docker cp</code> does not always work, especially in older versions of Docker.
In older versions of Docker, the <code>docker cp</code> command only allowed copying files from a <strong>container</strong> to the <strong>host</strong>.
Only since Docker 1.8, copying files from the host to a container is added.
You will get some error with unhelpful messages like this in older versions of Docker:</p>

<figure class='code'><figcaption><span>Unsupported "docker cp"</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@comp ~]$ ls maven_3.3.9-3_all.deb
</span><span class='line'>maven_3.3.9-3_all.deb
</span><span class='line'>
</span><span class='line'>[centos@comp ~]$ sudo docker cp maven_3.3.9-3_all.deb 9a8d782156ca:/home/jenkins
</span><span class='line'>FATA[0000] Error: Path not specified
</span><span class='line'>[centos@comp ~]$ sudo docker cp ./maven_3.3.9-3_all.deb 9a8d782156ca:/home/jenkins
</span><span class='line'>FATA[0000] Error: Path not specified
</span><span class='line'>[centos@comp ~]$ sudo docker cp ./maven_3.3.9-3_all.deb 9a8d782156ca:/home/jenkins/
</span><span class='line'>FATA[0000] Error: Path not specified
</span><span class='line'>[centos@comp ~]$ sudo docker cp maven_3.3.9-3_all.deb 9a8d782156ca:/home/jenkins/maven_3.3.9-3_all.deb
</span><span class='line'>FATA[0000] Error: Path not specified</span></code></pre></td></tr></table></div></figure>


<p>If you find yourself stuck with older versions of Docker, the alternative is to manually copy the files from hosts filesystem to containers filesystem location.
First, you need to determine where the containers filesystem (volume) is mounted on the host:</p>

<figure class='code'><figcaption><span>Using inspect to find Volume location</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@comp ~]$ sudo docker ps
</span><span class='line'>CONTAINER ID      IMAGE    COMMAND ...
</span><span class='line'>9a8d782156ca
</span><span class='line'>
</span><span class='line'>[centos@comp ~]$ sudo docker inspect -f { {.Id} } 9a8d782156ca
</span><span class='line'>9a8d782156ca9a3bd59545a18943de408ca58f42c4389c12e9bb43f4ad239d52
</span><span class='line'>
</span><span class='line'>[centos@comp ~]$ sudo docker inspect -f { {.Volumes} } 9a8d782156ca
</span><span class='line'>map[/home/jenkins:/var/lib/docker/vfs/dir/b051cc2b086c53ce436ad82b9332ba79687f3ddcf8ee77e3f8264e7cafe32438]
</span><span class='line'>[centos@comp ~]$ sudo ls /var/lib/docker/vfs/dir/b051cc2b086c53ce436ad82b9332ba79687f3ddcf8ee77e3f8264e7cafe32438
</span><span class='line'>test.txt</span></code></pre></td></tr></table></div></figure>


<p>NOTE: In the shell commands above, there is no space between <code>{</code> (space is added for Jekyll blog engine).
After the mounting path is determined, you can manipulate the container'ss filesystem directly, including copying files into it.</p>

<figure class='code'><figcaption><span>Directly copy file into containers filesystem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@comp ~]$ sudo cp maven_3.3.9-3_all.deb /var/lib/docker/vfs/dir/b051cc2b086c53ce436ad82b9332ba79687f3ddcf8ee77e3f8264e7cafe32438</span></code></pre></td></tr></table></div></figure>


<p>You can verify such manipulation by <code>docker exec</code>-ing into the container and verify the files:</p>

<figure class='code'><figcaption><span>Before and After</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jenkins@9a8d782156ca:~$ ls
</span><span class='line'>test.txt
</span><span class='line'>
</span><span class='line'>jenkins@9a8d782156ca:~$ ls
</span><span class='line'>maven_3.3.9-3_all.deb  test.txt</span></code></pre></td></tr></table></div></figure>


<h3>Reference</h3>

<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/cp/">docker cp</a></li>
<li><a href="http://stackoverflow.com/questions/22907231/copying-files-from-host-to-docker-container">Stackoverflow discussion</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Job DSL Plugin in Jenkins]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/10/30/job-dsl-plugin-in-jenkins/"/>
    <updated>2016-10-30T18:27:07-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/10/30/job-dsl-plugin-in-jenkins</id>
    <content type="html"><![CDATA[<p>How Job DSL plugin works and why it is losing its dominance to Jenkins Pipeline.</p>

<!--more-->


<h3>Job DSL</h3>

<figure class='code'><figcaption><span>Minimal Job DSL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">job</span><span class="o">(</span><span class="s1">&#39;Demo&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">description</span><span class="o">(</span><span class="s2">&quot;Starting pipeline&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">logRotator</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">daysToKeep</span><span class="o">(</span><span class="mi">15</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">steps</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">shell</span><span class="o">(</span><span class="s1">&#39;echo &quot;Hello World&quot;&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To illustrate the idea.
Obviously, lots of work need to be done to make sure the final generated <code>config.xml</code> is valid, including escaping special characters.</p>

<figure class='code'><figcaption><span>Simple implementation of Job DSL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">GroovyDsl</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="nf">description</span><span class="o">(</span><span class="n">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">print</span> <span class="s1">&#39;&lt;description&gt;&#39;</span>
</span><span class='line'>        <span class="n">print</span> <span class="n">description</span>
</span><span class='line'>        <span class="n">println</span> <span class="s1">&#39;&lt;/description&gt;&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="nf">logRotator</span><span class="o">(</span><span class="n">Closure</span> <span class="n">inner</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">println</span> <span class="s1">&#39;&lt;logRotator&gt;&#39;</span>
</span><span class='line'>        <span class="n">inner</span><span class="o">()</span>
</span><span class='line'>        <span class="n">println</span> <span class="s1">&#39;&lt;/logRotator&gt;&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="nf">steps</span><span class="o">(</span><span class="n">Closure</span> <span class="n">inner</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">println</span> <span class="s1">&#39;&lt;builders&gt;&#39;</span>
</span><span class='line'>        <span class="n">inner</span><span class="o">()</span>
</span><span class='line'>        <span class="n">println</span> <span class="s1">&#39;&lt;/builders&gt;&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">job</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Closure</span> <span class="n">closure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">GroovyDsl</span> <span class="n">body</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GroovyDsl</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">println</span> <span class="s2">&quot;Generating a Freestyle job $name&quot;</span>
</span><span class='line'>        <span class="n">println</span> <span class="s2">&quot;Save the following into config.xml file&quot;</span>
</span><span class='line'>        <span class="n">println</span> <span class="s1">&#39;&lt;project&gt;&#39;</span>
</span><span class='line'>        <span class="n">body</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">closure</span><span class="o">)</span>
</span><span class='line'>        <span class="n">println</span> <span class="s1">&#39;&lt;/project&gt;&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="nf">daysToKeep</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;&lt;daysToKeep&gt;$num&lt;/daysToKeep&gt;&quot;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;&lt;numToKeep&gt;-1&lt;/numToKeep&gt;&#39;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;&lt;artifactDaysToKeep&gt;-1&lt;/artifactDaysToKeep&gt;&#39;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;&lt;artifactNumToKeep&gt;-1&lt;/artifactNumToKeep&gt;&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="nf">shell</span><span class="o">(</span><span class="n">String</span> <span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;&lt;hudson.tasks.Shell&gt;&#39;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;&lt;command&gt;&#39;</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">cmd</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;&lt;/command&gt;&#39;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;&lt;/hudson.tasks.Shell&gt;&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">GroovyDsl</span><span class="o">.</span><span class="na">job</span><span class="o">(</span><span class="s1">&#39;Demo&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">description</span><span class="o">(</span><span class="s2">&quot;Starting pipeline&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">logRotator</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">daysToKeep</span><span class="o">(</span><span class="mi">15</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">steps</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">shell</span><span class="o">(</span><span class="s1">&#39;echo &quot;Hello World&quot;&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Output of the above script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Generating a Freestyle job Demo
</span><span class='line'>Save the following into config.xml file
</span><span class='line'><span class="nt">&lt;project&gt;</span>
</span><span class='line'><span class="nt">&lt;description&gt;</span>Starting pipeline<span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;logRotator&gt;</span>
</span><span class='line'><span class="nt">&lt;daysToKeep&gt;</span>15<span class="nt">&lt;/daysToKeep&gt;</span>
</span><span class='line'><span class="nt">&lt;numToKeep&gt;</span>-1<span class="nt">&lt;/numToKeep&gt;</span>
</span><span class='line'><span class="nt">&lt;artifactDaysToKeep&gt;</span>-1<span class="nt">&lt;/artifactDaysToKeep&gt;</span>
</span><span class='line'><span class="nt">&lt;artifactNumToKeep&gt;</span>-1<span class="nt">&lt;/artifactNumToKeep&gt;</span>
</span><span class='line'><span class="nt">&lt;/logRotator&gt;</span>
</span><span class='line'><span class="nt">&lt;builders&gt;</span>
</span><span class='line'><span class="nt">&lt;hudson.tasks.Shell&gt;</span>
</span><span class='line'><span class="nt">&lt;command&gt;</span>
</span><span class='line'>echo &quot;Hello World&quot;
</span><span class='line'><span class="nt">&lt;/command&gt;</span>
</span><span class='line'><span class="nt">&lt;/hudson.tasks.Shell&gt;</span>
</span><span class='line'><span class="nt">&lt;/builders&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compared with the Jenkins config.xml of the Freestyle job generated by the same Job DSL, we can see that there is not much different.</p>

<figure class='code'><figcaption><span>Output of config.xml in Jenkins</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project&gt;</span>
</span><span class='line'><span class="nt">&lt;actions/&gt;</span>
</span><span class='line'><span class="nt">&lt;description&gt;</span>Starting pipeline<span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;keepDependencies&gt;</span>false<span class="nt">&lt;/keepDependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;properties/&gt;</span>
</span><span class='line'><span class="nt">&lt;scm</span> <span class="na">class=</span><span class="s">&quot;hudson.scm.NullSCM&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;canRoam&gt;</span>true<span class="nt">&lt;/canRoam&gt;</span>
</span><span class='line'><span class="nt">&lt;disabled&gt;</span>false<span class="nt">&lt;/disabled&gt;</span>
</span><span class='line'><span class="nt">&lt;blockBuildWhenDownstreamBuilding&gt;</span>false<span class="nt">&lt;/blockBuildWhenDownstreamBuilding&gt;</span>
</span><span class='line'><span class="nt">&lt;blockBuildWhenUpstreamBuilding&gt;</span>false<span class="nt">&lt;/blockBuildWhenUpstreamBuilding&gt;</span>
</span><span class='line'><span class="nt">&lt;triggers/&gt;</span>
</span><span class='line'><span class="nt">&lt;concurrentBuild&gt;</span>false<span class="nt">&lt;/concurrentBuild&gt;</span>
</span><span class='line'><span class="nt">&lt;builders&gt;</span>
</span><span class='line'><span class="nt">&lt;hudson.tasks.Shell&gt;</span>
</span><span class='line'><span class="nt">&lt;command&gt;</span>echo &quot;Hello World&quot;<span class="nt">&lt;/command&gt;</span>
</span><span class='line'><span class="nt">&lt;/hudson.tasks.Shell&gt;</span>
</span><span class='line'><span class="nt">&lt;/builders&gt;</span>
</span><span class='line'><span class="nt">&lt;publishers/&gt;</span>
</span><span class='line'><span class="nt">&lt;buildWrappers/&gt;</span>
</span><span class='line'><span class="nt">&lt;logRotator&gt;</span>
</span><span class='line'><span class="nt">&lt;daysToKeep&gt;</span>15<span class="nt">&lt;/daysToKeep&gt;</span>
</span><span class='line'><span class="nt">&lt;numToKeep&gt;</span>-1<span class="nt">&lt;/numToKeep&gt;</span>
</span><span class='line'><span class="nt">&lt;artifactDaysToKeep&gt;</span>-1<span class="nt">&lt;/artifactDaysToKeep&gt;</span>
</span><span class='line'><span class="nt">&lt;artifactNumToKeep&gt;</span>-1<span class="nt">&lt;/artifactNumToKeep&gt;</span>
</span><span class='line'><span class="nt">&lt;/logRotator&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Allow-empty When Squashing]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/07/05/git-allow-empty-when-squashing/"/>
    <updated>2016-07-05T00:15:57-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/07/05/git-allow-empty-when-squashing</id>
    <content type="html"><![CDATA[<p>Many times in Git, we commit some work only to realize that is a mistake, and we should do another way.
The easy way to fix that is to revert the previous commit, a process in which Git creates another commit that undoes exactly everything in the last commit.
After that, we move on with the other way and check in commits for that.
Before pushing everything to the remote branch, as responsible software engineers :), we sometimes want to &ldquo;squash&rdquo; the commits to erase the mistake to keep the commit log clean.</p>

<!--more-->


<p>In the example shown below, my commit <code>daefc6e</code> was a mistake, and I reverted it with <code>f3886c2</code> commit, and then I checked in my correct solution in <code>b4cb02d</code> commit.
I wanted to squash those commits in an interactive rebase session, as seen in the following:</p>

<figure class='code'><figcaption><span>Rebase commands shown in text editor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pick daefc6e KSAFE REMOVAL.
</span><span class='line'>squash f3886c2 Revert "KSAFE REMOVAL."
</span><span class='line'>squash b4cb02d Update constants.
</span><span class='line'>
</span><span class='line'># Rebase 41ab184..b4cb02d onto 41ab184
</span><span class='line'>#
</span><span class='line'># Commands:
</span><span class='line'>#  p, pick = use commit
</span><span class='line'>#  r, reword = use commit, but edit the commit message
</span><span class='line'>#  e, edit = use commit, but stop for amending
</span><span class='line'>#  s, squash = use commit, but meld into previous commit
</span><span class='line'>#  f, fixup = like "squash", but discard this commit's log message
</span><span class='line'>#  x, exec = run command (the rest of the line) using shell
</span><span class='line'>#
</span><span class='line'># These lines can be re-ordered; they are executed from top to bottom.
</span><span class='line'>#
</span><span class='line'># If you remove a line here THAT COMMIT WILL BE LOST.
</span><span class='line'>#
</span><span class='line'># However, if you remove everything, the rebase will be aborted.
</span><span class='line'>#
</span><span class='line'># Note that empty commits are commented out</span></code></pre></td></tr></table></div></figure>


<p>However, <code>git rebase</code> always fail in such situations with the following &ldquo;error&rdquo; message:</p>

<figure class='code'><figcaption><span>git rebase fails</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rebase -i origin/feature/foobar
</span><span class='line'>You asked to amend the most recent commit, but doing so would make
</span><span class='line'>it empty. You can repeat your command with --allow-empty, or you can
</span><span class='line'>remove the commit entirely with "git reset HEAD^".
</span><span class='line'>rebase in progress; onto 41ab184
</span><span class='line'>You are currently rebasing branch 'feature/foobar' on '41ab184'.
</span><span class='line'>
</span><span class='line'>No changes
</span><span class='line'>
</span><span class='line'>Could not apply f3886c23589e0964a4483f6454c6edeba7d63fb7... KSAFE REMOVAL.</span></code></pre></td></tr></table></div></figure>


<p>The error message is very confusing.
When <code>daefc6e</code> and <code>f3886c2</code> commits are squashed, the net effect is nothing, which is the &ldquo;empty commit&rdquo; mentioned in that error message.
However, retrying the <code>git rebase</code> command with <code>--allow-empty</code> as said does not work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rebase --interactive --allow-empty 
</span><span class='line'>error: unknown option `allow-empty' </span></code></pre></td></tr></table></div></figure>


<p>Using <code>git rebase --continue</code> does not work as expected: it does not squash three commits into one.</p>

<p>After some Google searching, it turns out that the above error message comes from <code>git commit --amend</code>, which is delegated by <code>git rebase</code> to handle the squash.
When the message says &ldquo;repeat your command&rdquo;, it means repeating the <code>git commit --amend</code> command, something would never occurs to us.
Therefore, the right thing to do here is repeat <code>commit</code> and continue with the interactive rebase session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit --amend --allow-empty
</span><span class='line'>[detached HEAD 706f662] Revert "KSAFE REMOVAL."
</span><span class='line'>
</span><span class='line'>$ git rebase --continue
</span><span class='line'>[detached HEAD 923477f] Revert "KSAFE REMOVAL."
</span><span class='line'> 1 file changed, 3 insertions(+), 3 deletions(-)
</span><span class='line'>Successfully rebased and updated refs/heads/feature/foobar.</span></code></pre></td></tr></table></div></figure>


<p>By doing that, we will now have all three commits squashed into one and help cleaning up the commit log.</p>

<!--
http://git.661346.n2.nabble.com/Confusing-error-message-in-rebase-when-commit-becomes-empty-td7612948.html
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Tests Pass on Local but Fail on CI]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/06/30/java-intermittent-test-failures/"/>
    <updated>2016-06-30T17:51:13-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/06/30/java-intermittent-test-failures</id>
    <content type="html"><![CDATA[<p>We have all seen it before: intermittent unit test failures.
It could be agonizing that unit tests pass locally, but then fail in the Jenkins unit test build.</p>

<!--more-->


<p>In our experience, one of the most common causes is:
<strong>static initialization code that dynamically sets a static member variable from a config file value.</strong></p>

<p>What happens locally?
If you’re running from the command line, you probably have some environment variables set.
These allow some ConfigHelper class to find the resource properties files and load them.
In the end, code that looks like the following often ends up succeeding:</p>

<figure class='code'><figcaption><span>DbQueue class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">MY_CONFIG</span> <span class="o">=</span> <span class="n">ConfigHelper</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="s">&quot;config_key&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the unit tests on the CI server run without being set up for a Tomcat application server run.
Instead, they run using some mock framework such as JMockit.
Mocking in this scenario is a good, desirable thing.
However, it also means that code like that ends up failing to find those resources.
In the example above, the class <code>DbQueue</code>&rsquo;s static code was invoked <strong>even though the class itself has been mocked out</strong>.
And very often, classes like that throw some misleading exceptions, especially when trying to load and convert to a numeric value from a resource.</p>

<p>So, how do we fix it?
How do we prevent that class static member initialization code from being invoked in Jenkins test build?
The answer is when we mock the class in JMockit using the <code>@Mocked</code> annotation, we can provide the <code>stubOutClassInitialization=true</code> parameter, like this:</p>

<figure class='code'><figcaption><span>Mock with JMockit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Mocked</span><span class="o">(</span> <span class="n">stubOutClassInitialization</span> <span class="o">=</span> <span class="kc">true</span> <span class="o">)</span>
</span><span class='line'>    <span class="n">DbQueue</span> <span class="n">queue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will prevent the static code in the class <code>DbQueue</code> from running in Jenkins unit test builds.
The additional benefit of doing this <em>correctly</em> and <em>completely</em> is that we’ll be able to run our unit tests from inside Eclipse WITHOUT setting the <code>–DSBNHOME=</code> environment variable and the test will still complete as desired.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java: Unit Test Performance]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/06/06/java-unit-test-performance/"/>
    <updated>2016-06-06T22:47:42-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/06/06/java-unit-test-performance</id>
    <content type="html"><![CDATA[<p>According to <a href="https://www.youtube.com/watch?v=wEhu57pih5w">this</a>, the right way of automated testing is that we have lots of unit tests as majority of our overall automated tests, supplemented by a smaller set of functional tests and even fewer sets of integration tests (a.k.a., Test Automation Pyramid).
However, for that strategy to work, we should pay attention to unit test performance.
It is not productive for us developers to wait 30+ minutes to run unit tests locally, especially when we have multiple check-ins per day.
In addition, the runtime will get compounded as we add more unit tests.
Here, I list out few commonly observed mistakes to avoid and suggestions that frequently improve Java unit test performance.</p>

<!--more-->


<p>1) Do NOT add loggings/printing to your tests.
Use TestNG assertions instead of checking screen output.
Remove from the test classes all the <code>System.out.println</code> statements (that we might add when we start writing unit tests).
The logs don&rsquo;t matter when we&rsquo;re running in parallel.
Moreover, it could add 5-10 minutes to the build time, regardless of running in sequential or parallel.</p>

<p>2) Another common mistake is to override the default <code>System.out</code> by calling <code>System.setOut(PrintStream)</code> and verify by asserting against log statements.
This tactic is often used to verify expected method invocations, which will subsequently generate some specific log entries.
For such behavior testing, consider using <a href="https://jmockit.googlecode.com/svn-history/r2056/trunk/www/tutorial/BehaviorBasedTesting.html">Jmockit Verifications</a> instead of depending on output of logs generated.</p>

<p>3) Mock logging and config classes if applicable.
Otherwise, we might encountered errors like &ldquo;Exception encountered, logging will be disabled&rdquo;, probably thrown by JMockit.
If there is any static initialization block in the mocked class for logging and configuration purposes, consider using <code>(stubOutClassInitialization = true)</code> (see <a href="http://tdongsi.github.io/javascript/blog/2016/06/30/java-intermittent-test-failures/">this</a>).</p>

<p>4) Choosing the right parallel execution settings can substantially improve the execution time.
However, for parallel test runs, consider splitting big test classes (> 100 tests) that are taking much longer than others.
As we are running test classes in parallel across multiple JVMs, it is often the case that all JVMs are shut down except for one or two which are running some big test classes.
Splitting those classes into multiple smaller classes will distribute the load equally across multiple JVMs.</p>

<p>5) Out of all the <code>maven-surefire</code> options for running tests in parallel, the one that worked considering JMockit limitations with parallel execution (and our test structure) are as below:</p>

<figure class='code'><figcaption><span>Maven-surefire options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;parallel&gt;</span>classes<span class="nt">&lt;/parallel&gt;</span>
</span><span class='line'><span class="nt">&lt;forkCount&gt;</span>${forkCount}<span class="nt">&lt;/forkCount&gt;</span>
</span><span class='line'><span class="nt">&lt;reuseForks&gt;</span>false<span class="nt">&lt;/resuseForks&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertica: Refresh Your Projections]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/02/29/vertica-9-refresh-projections/"/>
    <updated>2016-02-29T00:54:02-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/02/29/vertica-9-refresh-projections</id>
    <content type="html"><![CDATA[<p>Most information presented in this post is directly quoted from <a href="https://community.dev.hpe.com/t5/Vertica-Knowledge-Base/Understanding-Vertica-Epochs/ta-p/233749">this page</a>.</p>

<p><strong>Epoch</strong>: An epoch is 64-bit number that represents a logical time stamp for the data in Vertica.
The epoch advances when the logical state of the system changes or when the data is committed with a DML operation (INSERT, UPDATE, MERGE, COPY, or DELETE).
The <code>EPOCHS</code> system table contains the date and time of each closed epoch and the corresponding epoch number of the closed epoch.</p>

<figure class='code'><figcaption><span>epochs table</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=&gt; select * from epochs;
</span><span class='line'>
</span><span class='line'>epoch_close_time            epoch_number
</span><span class='line'>2016-03-04 21:44:24.192495    610131</span></code></pre></td></tr></table></div></figure>


<p><strong>Ancient History Mark (AHM)</strong>: A large epoch map can increase the catalog size.
The ancient history mark is the epoch prior to which historical data can be purged from physical storage.
You cannot run any historical queries prior to the AHM.
By default, Vertica advances the AHM at an interval of 5 minutes.</p>

<p>There are scenarios that the ancient history marker does not advance: there is an unrefreshed <a href="http://tdongsi.github.io/javascript/blog/2016/02/07/vertica-7-projections/">projection</a>.
To find about the unrefreshed projection, use the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT * FROM projections where is_up_to_date = 'f';</span></code></pre></td></tr></table></div></figure>


<p>It was already mentioned in the HPE page that AHM will not advance if there’s any projection not up to date.
However, it also means that AHM will also not advance if there’s no activity (data insert/update or delete) on a table.
AHM could lag behind at the create epoch of some unrefreshed projection.
Therefore, we need to make sure we are <strong>always</strong> refreshing projections after creating them.</p>

<p>Generally, you can refresh a projection by executing the <code>START_REFRESH</code> meta-function, which is a background process, or the <code>REFRESH</code> meta-function, which is a foreground process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select START_REFRESH();</span></code></pre></td></tr></table></div></figure>


<h3>Links</h3>

<ol>
<li><a href="https://community.dev.hpe.com/t5/Vertica-Knowledge-Base/Understanding-Vertica-Epochs/ta-p/233749">Epoch and AHM</a></li>
<li><a href="https://community.dev.hpe.com/t5/Vertica-Blog/Best-Practices-for-Refreshing-Large-Projections/ba-p/229505">Best Practices</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertica: Performance Optimization Notes]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/02/13/vertica-8-performance-tuning/"/>
    <updated>2016-02-13T23:52:44-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/02/13/vertica-8-performance-tuning</id>
    <content type="html"><![CDATA[<p>In this post, most of optimization notes for Vertica performance are from our team&rsquo;s interaction with <a href="http://www.nexius.com/software-and-business-intelligence/">Nexius</a> consultants.
Also see <a href="http://tdongsi.github.io/javascript/blog/2015/12/16/vertica-tip-best-practices/">Vertica Best Practices</a>.</p>

<!--more-->


<h3><code>NOT IN</code> better than <code>NOT EXISTS</code></h3>

<p>When we want to insert a row into a dimension table AND check for duplicates at the same time, we usually do this in DML scripts:</p>

<figure class='code'><figcaption><span>BAD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="s1">&#39;English&#39;</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="p">(</span><span class="k">SELECT</span> <span class="s1">&#39;x&#39;</span> <span class="k">FROM</span> <span class="n">dim_country</span> <span class="k">WHERE</span> <span class="n">country_name</span> <span class="o">=</span> <span class="s1">&#39;United States&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, for all such inserts, we were recently informed that it is better <strong>in Vertica</strong> to do <code>NOT IN</code> instead of <code>NOT EXISTS</code>.
So, for example above:</p>

<figure class='code'><figcaption><span>GOOD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="s1">&#39;English&#39;</span>
</span><span class='line'><span class="k">WHERE</span> <span class="s1">&#39;United States&#39;</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="k">select</span> <span class="n">country_name</span> <span class="k">from</span> <span class="n">dim_country</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Avoid using <code>LEFT JOIN</code> to check existence</h3>

<p>Let&rsquo;s say we have an ETL that regularly inserts new data into an existing dimension table.</p>

<figure class='code'><figcaption><span>BAD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dim_country</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="n">country_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">country_name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">country_language</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">ssp</span><span class="p">.</span><span class="n">country_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ssp</span><span class="p">.</span><span class="n">country_name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ssp</span><span class="p">.</span><span class="n">country_language</span><span class="p">,</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">staging_table</span> <span class="n">ssp</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">dim_country</span> <span class="n">dc</span> <span class="k">on</span> <span class="n">dc</span><span class="p">.</span><span class="n">country_id</span><span class="o">=</span><span class="n">ssp</span><span class="p">.</span><span class="n">country_id</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">dc</span><span class="p">.</span><span class="n">country_id</span> <span class="k">is</span> <span class="k">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are sometimes doing <code>LEFT JOIN</code> like this only to determine whether or not an entry already exists in the table.
It would be faster to use a <code>WHERE</code> clause instead to perform that existence check.
Although it might sound counter-intuitive, but reducing <code>JOIN</code> operations like this has been regularly recommended.</p>

<figure class='code'><figcaption><span>GOOD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dim_country</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="n">country_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">country_name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">country_language</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">ssp</span><span class="p">.</span><span class="n">country_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ssp</span><span class="p">.</span><span class="n">country_name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ssp</span><span class="p">.</span><span class="n">country_language</span><span class="p">,</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">staging_table</span> <span class="n">ssp</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">ssp</span><span class="p">.</span><span class="n">country_id</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">country_id</span> <span class="k">FROM</span> <span class="n">dim_country</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Avoid function calls in <code>WHERE</code> and <code>JOIN</code> clauses</h3>

<p>For this performance tip, we make a slight change to the example ETL in the last section above where <code>country_id</code> column is removed. In this case, we can use a normalized <code>country_name</code> as the ID to check for existing entries in the table:</p>

<figure class='code'><figcaption><span>BAD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dim_country</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="n">country_name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">country_language</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="k">SELECT</span> <span class="n">ssp</span><span class="p">.</span><span class="n">country_name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ssp</span><span class="p">.</span><span class="n">country_language</span><span class="p">,</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">staging_table</span> <span class="n">ssp</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">dim_country</span> <span class="n">dc</span> <span class="k">on</span> <span class="k">lower</span><span class="p">(</span><span class="n">dc</span><span class="p">.</span><span class="n">country_name</span><span class="p">)</span><span class="o">=</span><span class="k">lower</span><span class="p">(</span><span class="n">ssp</span><span class="p">.</span><span class="n">country_name</span><span class="p">)</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">dc</span><span class="p">.</span><span class="n">country_name</span> <span class="k">is</span> <span class="k">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, we normalize <code>country_name</code> to lower case. Note that <code>WHERE</code> clause should be used instead of <code>LEFT JOIN</code> as discussed above.</p>

<figure class='code'><figcaption><span>BETTER, but still BAD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">dim_country</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="n">country_name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">country_language</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="k">SELECT</span> <span class="n">ssp</span><span class="p">.</span><span class="n">country_name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ssp</span><span class="p">.</span><span class="n">country_language</span><span class="p">,</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">staging_table</span> <span class="n">ssp</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">lower</span><span class="p">(</span><span class="n">ssp</span><span class="p">.</span><span class="n">country_name</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">lower</span><span class="p">(</span><span class="n">country_name</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">dim_country</span><span class="p">);;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, such change still has bad performance because, in general, function calls in <code>WHERE</code> and <code>JOIN</code> clauses should be avoided in Vertica.
In both examples above, calling functions like <code>LOWER</code> in <code>WHERE</code> and <code>JOIN</code> clauses will affect the performance of the ETLs.</p>

<p>The solution for this scenario is that, since we control what goes into dimension tables, we can ensure that columns like <code>country_name</code> are always stored in lower-case.
Then, we can do the same when creating the temporary table such as <code>staging_table</code> that we are comparing to for checking existence.</p>

<h3>Use  <a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/ANALYZE_STATISTICS.htm">ANALYZE_STATISTICS</a></h3>

<p>Make sure to run <code>ANALYZE_STATISTICS</code> after all data loads.
Using this function, tables are analyzed for best performance in subsequent queries ran against it.
Without information from <code>ANALYZE_STATISTICS</code>, the query optimizer assumes uniform distribution of data values and equal storage usage for all projections.</p>

<p>Note that <code>ANALYZE_STATISTICS</code> is only supported on <em>local</em> temporary tables, but not on <em>global</em> temporary tables.
In addition, when we add <code>ANALYZE_STATISTICS</code> function calls into our ETL scripts, errors might be thrown when a second <code>ANALYZE_STATISTICS</code> call is made while the first is still running.
Those errors can be ignored but they must be caught accordingly to separate with other Vertica error messages.</p>

<h3>Avoid creating temporary tables using <code>SELECT</code></h3>

<p>Instead of creating temporary tables using <code>SELECT</code>, it is recommended to:</p>

<ol>
<li>Create the temporary table first without a projection.</li>
<li>Create a super <a href="http://tdongsi.github.io/javascript/blog/2016/02/07/vertica-post-7/">projection</a> with the correct column encodings and <code>ORDER BY</code> clause</li>
<li>Populate it using <code>INSERT /*+ direct */ INTO</code>. Note the <code>/*+ direct */</code> hint to write data directly to disk, bypassing memory.</li>
<li>Run <code>ANALYZE_STATISTICS</code>. See the last section.</li>
</ol>


<p>For example, in a Vertica ETL script that runs daily, we usually create a temporary table to retrieve the latest records from a source table like this:</p>

<figure class='code'><figcaption><span>BAD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TEMPORARY</span> <span class="k">TABLE</span> <span class="n">customer_last_temp</span>
</span><span class='line'><span class="k">ON</span> <span class="k">COMMIT</span> <span class="k">PRESERVE</span> <span class="k">ROWS</span>
</span><span class='line'><span class="k">AS</span><span class="p">(</span>
</span><span class='line'>  <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">select</span> <span class="o">*</span><span class="p">,</span>
</span><span class='line'>    <span class="n">row_number</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">customer_id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">last_modify_date</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rank</span>
</span><span class='line'>    <span class="k">from</span>  <span class="n">stg_customer</span> <span class="n">rpt</span>
</span><span class='line'>  <span class="p">)</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">t1</span><span class="p">.</span><span class="n">rank</span> <span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, <code>last_modify_date</code> is the <a href="https://en.wikipedia.org/wiki/Change_data_capture">CDC</a> column and <code>customer_id</code> is the primary key column.
Although this SQL statement is simple and easy to understand, it is really slow for a large and growing <code>stg_customer</code> table that contains updates to all customers on multiple dates, with millions of <em>new</em> customer entries each day.
Instead, the recommended coding pattern is to create a temporary table first without a projection:</p>

<figure class='code'><figcaption><span>Create a temporary table without projection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">LOCAL</span> <span class="k">TEMPORARY</span> <span class="k">TABLE</span> <span class="n">customer_last_temp</span>  <span class="p">(</span>
</span><span class='line'>        <span class="n">customer_id</span>                    <span class="nb">int</span><span class="p">,</span>
</span><span class='line'>        <span class="n">subscribe_date</span>                 <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">cancel_date</span>                    <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">last_modify_date</span>               <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">ON</span> <span class="k">COMMIT</span> <span class="k">PRESERVE</span> <span class="k">ROWS</span> <span class="k">NO</span> <span class="n">PROJECTION</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is also recommended that the column names are explicitly specified, so that only required columns are created in the temporary table.
A <code>LOCAL</code> temporary table is created, instead of <code>GLOBAL</code>, so that we can use <code>ANALYZE_STATISTICS</code> functions as discussed above.
Next, create a super projection with the correct column encodings and <code>ORDER BY</code> clause:</p>

<figure class='code'><figcaption><span>Create a super projection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="n">PROJECTION</span> <span class="n">customer_last_temp_super</span> <span class="p">(</span>
</span><span class='line'>      <span class="n">customer_id</span> <span class="k">ENCODING</span> <span class="n">DELTARANGE_COMP</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">subscribe_date</span> <span class="k">ENCODING</span> <span class="n">GCDDELTA</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">cancel_date</span> <span class="k">ENCODING</span> <span class="n">BLOCKDICT_COMP</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">last_modify_date</span> <span class="k">ENCODING</span> <span class="n">BLOCKDICT_COMP</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">AS</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">customer_id</span>
</span><span class='line'>     <span class="p">,</span> <span class="n">subscribe_date</span>
</span><span class='line'>     <span class="p">,</span> <span class="n">cancel_date</span>
</span><span class='line'>     <span class="p">,</span> <span class="n">last_modify_date</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">customer_last_temp</span>
</span><span class='line'> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customer_id</span>
</span><span class='line'><span class="n">SEGMENTED</span> <span class="k">BY</span> <span class="n">HASH</span> <span class="p">(</span><span class="n">customer_id</span><span class="p">)</span> <span class="k">ALL</span> <span class="n">NODES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, insert &ldquo;directly&rdquo; into the temporary table:</p>

<figure class='code'><figcaption><span>Populate the table</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="cm">/*+ direct */</span> <span class="k">INTO</span> <span class="n">customer_last_temp</span> <span class="p">(</span>
</span><span class='line'>      <span class="n">customer_id</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">subscribe_date</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">cancel_date</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">last_modify_date</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">WITH</span> <span class="n">t1</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="n">company_id</span>
</span><span class='line'>         <span class="p">,</span> <span class="n">subscribe_date</span>
</span><span class='line'>         <span class="p">,</span> <span class="n">cancel_date</span>
</span><span class='line'>         <span class="p">,</span> <span class="n">last_modify_date</span>
</span><span class='line'>         <span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">customer_id</span>
</span><span class='line'>                                  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">last_modify_date</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rank</span>
</span><span class='line'>      <span class="k">FROM</span> <span class="n">stg_customer</span> <span class="k">AS</span> <span class="n">rpt</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">company_id</span>
</span><span class='line'>     <span class="p">,</span> <span class="n">subscribe_date</span>
</span><span class='line'>     <span class="p">,</span> <span class="n">cancel_date</span>
</span><span class='line'>     <span class="p">,</span> <span class="n">last_modify_date</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">t1</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">t1</span><span class="p">.</span><span class="n">rank</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>WITH</code> clause is just a more readable way to write the sub-query in the original SQL statement (see <a href="http://tdongsi.github.io/javascript/blog/2016/02/03/vertica-post-8/">WITH clause</a>).
In addition, the wildcard <code>*</code> in the original SQL query is also avoided, in case the table <code>stg_customer</code> is a very wide table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertica Projections]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/02/07/vertica-7-projections/"/>
    <updated>2016-02-07T00:50:44-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/02/07/vertica-7-projections</id>
    <content type="html"><![CDATA[<p>Projections are key in Vertica performance tuning.
Details of Vertica projections are discussed in the following blog posts from HP-Vertica:</p>

<ol>
<li><a href="https://www.vertica.com/2011/09/01/the-power-of-projections-part-1/">https://www.vertica.com/2011/09/01/the-power-of-projections-part-1/</a></li>
<li><a href="https://www.vertica.com/2011/09/02/the-power-of-projections-part-2/">https://www.vertica.com/2011/09/02/the-power-of-projections-part-2/</a></li>
<li><a href="https://www.vertica.com/2011/09/06/the-power-of-projections-part-3/">https://www.vertica.com/2011/09/06/the-power-of-projections-part-3/</a></li>
</ol>


<p>In summary, Vertica projections represent collections of columns (like table) but they are optimized for analytics at the physical storage structure level and they are not constrained by the logical schema.
For each regular table, Vertica requires a minimum of one projection, called a “superprojection”.
Vertica creates a default super-projection when running CREATE TABLE statement.
<a href="https://www.vertica.com/2011/09/06/the-power-of-projections-part-3/">Part 3</a> also compares Vertica projections with &ldquo;Materialized Views&rdquo; and &ldquo;Indexes&rdquo; in traditional databases.</p>

<p>For Vertica performance tuning, we create multiple projections, customize them and parameters of each projection to achieve the best performance.
Database Designer is a tool provided by Vertica to help us find the optimal projections, based on data statistics and frequent queries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS: Developing With Amazon S3]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/01/18/aws-developing-with-amazon-s3/"/>
    <updated>2016-01-18T17:13:28-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/01/18/aws-developing-with-amazon-s3</id>
    <content type="html"><![CDATA[<p>Amazon Simple Storage Service or S3 is a simple, scalable web services to store and retrieve data.
This post talks about basic concepts of buckets and objects in S3, basic and advanced operations on objects in S3, and standard development considerations when working with S3 using SDK.</p>

<!--more-->


<h3>S3 Buckets and Objects</h3>

<p>Files of any kind such as text, video, photo are stored as objects in S3 <em>buckets</em>.
The bucket name must be globally unique across Amazon S3. It is your responsibility to ensure uniqueness of the bucket name.
A bucket can be <em>versioning-enabled</em>, it will store every version of every object in the bucket.</p>

<p>Each <em>object</em> in S3 is identified by a unique key. The object key is used for upload and retrieval. Alphanumeric characters and <code>!-_.*'/</code> are allowed in a key name.</p>

<p>Bucket naming tips:</p>

<ul>
<li>To ensure uniqueness, you might prefix the bucket name with the name of your organization.</li>
<li>Avoid using a period in the bucket name. Buckets that have a period in the bucket name can cause certificate exception when accessing with HTTPS-based URLs.</li>
</ul>


<p>Object key naming tips:</p>

<ul>
<li>Use prefixes and <code>/</code> (or other delimiters) to logically group your objects. For example, <code>prog/java/arrays.html</code>. There is no hierarchy of objects (e.g., folder) or nested buckets in S3.

<ul>
<li>However, the Amazon S3 console supports the <a href="http://docs.aws.amazon.com/AmazonS3/latest/UG/FolderOperations.html">folder concept</a> for convenience and usability. Amazon S3 does this by using key name prefixes for objects.</li>
</ul>
</li>
<li>For performance and scalability, consider using hash as the outermost prefix, in addition to other logical grouping prefixes. See &ldquo;Programming Considerations&rdquo; section below.</li>
</ul>


<h3>Operations on Objects</h3>

<p>Basic operations on S3 objects and buckets are:</p>

<ul>
<li>Put: upload or copy object, up to 5 GB. You can use multi-part upload API for larger objects up to 5 TB.</li>
<li>Get: Retrieve a whole object or part of an object.</li>
<li><a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/ListingKeysHierarchy.html">List Keys</a>: List object keys by prefix and delimiter.</li>
<li>Delete: Delete one or more objects.

<ul>
<li>If versioning is not enabled, an object is permanently deleted by specifying its key.</li>
<li>If versioning is enabled, you delete an object by specifying a key and version ID. You must delete all versions of an object to remove it.</li>
<li>If versioning is enabled and version is not specified, S3 adds a delete marker to current version of the object. Trying to retrieve an object with a delete marker will returns a &ldquo;404 Not Found&rdquo; error by S3.</li>
</ul>
</li>
<li>Restore: Restore an object archived on Amazon Glacier.</li>
</ul>


<h4>Other operations in S3</h4>

<p>Advanced operations that you should know when situations arise.</p>

<p><strong>Scenario 1</strong>: You want to let users upload files to your buckets for some time duration.
<strong>Solution 1</strong>: You should never share your AWS credentials to let users upload files to your buckets.
Instead, generate a <strong>pre-signed URL</strong> with your security credentials, bucket name, object key, HTTP method (PUT or GET), and expiration date and time.
You share this pre-signed URL to users who will use this to access your S3 buckets.</p>

<p><strong>Scenario 2</strong>: Encryption and strict data security is required.
<strong>Solution 2</strong>: You can enable:</p>

<ul>
<li>Securing data in transit.

<ul>
<li>SSL-encrypted data transfer by using HTTPS</li>
<li><a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Client-side encryption</a></li>
</ul>
</li>
<li>Securing data at rest on AWS server.

<ul>
<li><a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">Server-side encryption</a></li>
</ul>
</li>
</ul>


<p><strong>Scenario 3</strong>: You want your web applications that are loaded in one domain to interact with S3 resources in a different domain.
<strong>Solution 3</strong>: Check out <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">CORS</a>.</p>

<h3>Programming considerations</h3>

<ul>
<li>According to <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/request-rate-perf-considerations.html">this guideline</a>, <strong>avoid</strong> using some sequential prefix (e.g., timestamp or alphabetical sequence) for your objects' key names. Instead, prefix the key name with its hash and, optionally, store the original key name in the object&rsquo;s metadata. See examples in the link for more information.</li>
<li>If your application uses fixed buckets, avoid unnecessary requests by checking the existence of buckets. Instead, handle <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html">NoSuchBucket errors</a> when buckets do not exist.</li>
<li>Set the object metadata before uploading an object. Otherwise, you will have extra requests to do copy operation to update metadata.</li>
<li>Cache bucket and key names if possible.</li>
<li>Set bucket region closest to latency-sensitive users.</li>
<li>Compress objects to reduce the size of data transferred and storage used.</li>
<li>Use an exponential back-off algorithm to retry after failed connection attempts. See <a href="http://docs.aws.amazon.com/general/latest/gr/api-retries.html">here</a>.</li>
<li>Enable application logging. For example, <a href="http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/java-dg-logging.html">in Java</a>.</li>
<li>Enable <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/ServerLogs.html">server access logging</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS: Getting Started on Mac OSX]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/01/17/aws-set-up-aws-credentials-on-mac-osx/"/>
    <updated>2016-01-17T20:57:35-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/01/17/aws-set-up-aws-credentials-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Quick-start guide on AWS development in Java and Python.</p>

<!--more-->


<h3>Set up AWS development environment</h3>

<p>First, you need to set up your AWS credentials on your Mac by creating the following files at the following specific locations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MTVL1288aeea2-82:~ cdongsi$ mkdir ~/.aws
</span><span class='line'>MTVL1288aeea2-82:~ cdongsi$ touch ~/.aws/credentials
</span><span class='line'>MTVL1288aeea2-82:~ cdongsi$ touch ~/.aws/config</span></code></pre></td></tr></table></div></figure>


<p>In Windows, the locations of those files will be <code>C:\Users\USERNAME\.aws\credentials</code> and <code>C:\Users\USERNAME\.aws\config</code>, respectively.
You <em>must</em> fill in your AWS access credentials (Access Key ID and Secret Access Key) into the file <code>credentials</code>. Optionally, you can set the default region in the <code>config</code> file.
The content of the files will look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MTVL1288aeea2-82:~ cdongsi$ cat ~/.aws/credentials
</span><span class='line'>[default]
</span><span class='line'>aws_access_key_id = your_access_key_id
</span><span class='line'>aws_secret_access_key = your_secret_access_key
</span><span class='line'>
</span><span class='line'>MTVL1288aeea2-82:~ cdongsi$ cat ~/.aws/config
</span><span class='line'>[default]
</span><span class='line'>region=us-west-2</span></code></pre></td></tr></table></div></figure>


<h3>HelloAws using Java</h3>

<p>Now, you can install AWS Toolkit for Eclipse from <a href="http://aws.amazon.com/eclipse/">this link</a>. Follow the instruction in that page to install AWS Toolkit.</p>

<p>After AWS Toolkit is installed, you are ready to run the first <code>HelloAws</code> Java application. In Eclipse, create a AWS Console application.</p>

<ol>
<li>Click the new orange button on Eclipse taskbar named &ldquo;AWS Toolkit for Eclipse&rdquo;.</li>
<li>Click the link named &ldquo;Create a New AWS Java Project&rdquo;.</li>
<li>Fill in &ldquo;Project name&rdquo; as &ldquo;HelloAws&rdquo;. Check &ldquo;AWS Console Application&rdquo; from &ldquo;AWS SDK for Java Samples&rdquo; panel.</li>
</ol>


<p>Note that the sample generated has the following instruction in its main class. If you haven&rsquo;t do it, follow the steps above to set up your AWS access credentials.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsConsoleApp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Before running the code:</span>
</span><span class='line'><span class="cm">     *      Fill in your AWS access credentials in the provided credentials</span>
</span><span class='line'><span class="cm">     *      file template, and be sure to move the file to the default location</span>
</span><span class='line'><span class="cm">     *      (/Users/cdongsi/.aws/credentials) where the sample code will load the</span>
</span><span class='line'><span class="cm">     *      credentials from.</span>
</span><span class='line'><span class="cm">     *      https://console.aws.amazon.com/iam/home?#security_credential</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * WARNING:</span>
</span><span class='line'><span class="cm">     *      To avoid accidental leakage of your credentials, DO NOT keep</span>
</span><span class='line'><span class="cm">     *      the credentials file in your source directory.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">AmazonEC2</span>      <span class="n">ec2</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">AmazonS3</span>       <span class="n">s3</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">AmazonSimpleDB</span> <span class="n">sdb</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If your AWS credentials are ready, simply run the sample AWS console code as &ldquo;Java Application&rdquo;. The output will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>===========================================
</span><span class='line'>Welcome to the AWS Java SDK!
</span><span class='line'>===========================================
</span><span class='line'>You have access to 4 Availability Zones.
</span><span class='line'>You have 0 Amazon EC2 instance(s) running.
</span><span class='line'>You have 0 Amazon SimpleDB domain(s)containing a total of 0 items.
</span><span class='line'>You have 0 Amazon S3 bucket(s), containing 0 objects with a total size of 0 bytes.</span></code></pre></td></tr></table></div></figure>


<h3>HelloAws using Python</h3>

<p>To install <a href="http://aws.amazon.com/sdk-for-python/">AWS SDK for Python</a>, run the following the command as instructed in that page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install boto3
</span></code></pre></td></tr></table></div></figure>


<p>In my case, I used a slightly different command to avoid permission errors on Mac OSX:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install boto3 --user</span></code></pre></td></tr></table></div></figure>


<p>I use PyCharm/IntelliJ as IDE for Python and, apparently, there is no Python sample for it. In PyCharm, you can use the following Python script as your <code>HelloAws</code> program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">boto3</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">botocore.exceptions</span> <span class="kn">import</span> <span class="n">ClientError</span><span class="p">,</span><span class="n">NoCredentialsError</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getS3BucketNumber</span><span class="p">():</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s3</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&#39;s3&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">buckets</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">NoCredentialsError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;No AWS Credentials&quot;</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">bucket_num</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">s3</span><span class="o">.</span><span class="n">buckets</span><span class="o">.</span><span class="n">all</span><span class="p">()))</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Number of buckets: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">bucket_num</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bucket_num</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">ClientError</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">getS3BucketNumber</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that it is based on the <a href="https://github.com/boto/boto3#quick-start">Quick start on Github</a>. In PyCharm, running the above Python should print the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Number of buckets: 0</span></code></pre></td></tr></table></div></figure>


<h3>Quick note on Python API vs. Java API</h3>

<p>Note that Boto3 SDK for Python support <a href="http://boto3.readthedocs.org/en/latest/guide/resources.html">&ldquo;Resource API&rdquo;</a>.
As opposed to &ldquo;Service Client API&rdquo; like AWS SDK for Java, Resource API provides a higher level interface to the service and it is easier to understand and simpler to use.</p>

<p>For example, the generated example for AWS&rsquo;s Java SDK uses a Service Client API. It uses a class AmazonS3Client that controls the requests you make to the S3 service.
Meanwhile, the Boto3 SDK for Python has classes representing the conceptual resources (e.g., s3.Bucket) that you interact with when using the S3 service.
This is a higher level abstraction compared to a client class like AmazonS3Client making low-level calls to the service API.</p>

<h3>External Links</h3>

<ul>
<li>Python

<ul>
<li><a href="https://boto3.readthedocs.org/en/latest/guide/index.html">Developer Guide</a></li>
<li><a href="https://boto3.readthedocs.org/en/latest/reference/core/index.html">API Documentation</a></li>
</ul>
</li>
<li>Java

<ul>
<li><a href="http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/welcome.html">Developer Guide</a></li>
<li><a href="http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/index.html">API Documentation</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Virtual Machine for ETL Testing]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2016/01/10/find-and-replace-a-string-in-multiple-files/"/>
    <updated>2016-01-10T23:49:15-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2016/01/10/find-and-replace-a-string-in-multiple-files</id>
    <content type="html"><![CDATA[<p>When developing data-warehouse solutions in Vertica, you want to set up some test environment.
Ideally, you should have separate schema for each developer.
However, it is usually NOT possible in my experience: developers and test engineers have to share very few schemas in development environment.
The explanation that I usually get is that having a schema for each developer will not scale in database maintenance and administration, and there are likely some limits in Vertica&rsquo;s commercial license.
If that is the case, I recommend that we look into using Vertica Community Edition on <strong>Virtual Machines (VMs)</strong> for sandbox test environment, as a cheap alternative.</p>

<!--more-->


<h3>Vertica Virtual Machine as sandbox test environment</h3>

<p>Are VMs really necessary in data-warehouse testing? When testing Extract-Transform-Load (ETL) processes, I find that many of test cases require regular set-up and tear-down, adding mock records to force rare logical branches and corner cases, and/or running ETLs multiple times to simulate daily runs of those processes.
Regular tear-down requires dropping multiple tables regularly, which requires much greater care and drains much mental energy when working with others' data and tables.
Similarly, adding mock records into some commonly shared tables might affect others when they assume the data is production-like.
Running ETL scripts regularly, which could be computationally intensive, on a shared Vertica cluster might affect the performance or get affected by others' processes.
In short, for these tests, I cannot use the common schema that is shared with others since it might interfere others and/or destroy valuable common data.
Using a Vertica VM as the sandbox test environment helps us minimize interference to and from others' data and activities.</p>

<h3>Single-node VM and KSAFE clause</h3>

<p>I have been using a <strong>single-node</strong> Vertica VM to run tests for sometime. And it works wonderfully for testing purpose, especially when you want to isolate issues, for example, a corner case. The Vertica VM can be downloaded from HP Vertica&rsquo;s support website (NOTE: As of 2016 Jan 1st, the Vertica 7.1 VM is taken down while the Vertica 7.2 VM is not available).</p>

<p>The only minor problem is when we add <code>KSAFE 1</code> in our DDL scripts (i.e., <code>CREATE TABLE</code> statements) for production purposes. This gives error on single-node VM when running DDL scripts to set up schema.
The reason is that Vertica database with one or two hosts cannot be <em>k-safe</em> (i.e., it may lose data if it crashes) and three-node cluster is the minimum requirement to have <code>KSAFE 1</code> in <code>CREATE TABLE</code> statements to work.</p>

<p>Even then, the workaround for running those DDL scripts in tests is easy enough if all DDL scripts are all located in a single folder. The idea is that since <code>KSAFE 1</code> does not affect ETL processes' transform logics, we can remove those KSAFE clauses to set up the test schema and go ahead with our ETL testing. Specifically, in my project, my workflow for ETL testing with <strong>Git</strong> is as follows:</p>

<ul>
<li>Branch the latest code (<code>develop</code> branch) into a temporary branch (e.g., <code>local/develop</code> branch).</li>
<li>Find and remove <code>KSAFE 1</code> in all DDL files (see subsection below).</li>
<li>While still in <code>local/develop</code> branch, commit all these changes in a <strong>single</strong> commit with some unique description (e.g., &ldquo;KSAFE REMOVAL&rdquo;).</li>
<li>Add unit and functional tests to ETL scripts in this branch.</li>
<li>After tests are properly developed and checked-in, reverse the &ldquo;KSAFE REMOVAL&rdquo; commit above.

<ul>
<li>In SourceTree, it could be done by a simple right-click on that commit and selecting &ldquo;Reverse Commit&rdquo;.</li>
</ul>
</li>
<li>Merge <code>local/develop</code> branch into <code>develop</code> branch (create a pull request if needed). You will now have your tests with the latest codes in <code>develop</code> branch.</li>
</ul>


<h4>Find and replace a string in multiple files</h4>

<p>There are times and times again that you find that you have to replace every single occurrences of some string in multiple files with another string. Finding and removing <code>KSAFE 1</code> like the above workflow is an example where &ldquo;removing string&rdquo; is a special case of &ldquo;replacing string&rdquo; with nothing. This operation can be quickly done by the following bash command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep -rl match_string your_dir/ | xargs sed -i 's/old_string/new_string/g'</span></code></pre></td></tr></table></div></figure>


<p>If you are familiar with bash scripting, the above command is straight forward. This quick explanation is for anyone who does not understand the command:</p>

<ul>
<li><code>grep</code> command finds all files in <code>your_dir</code> directory that contain <code>match_string</code>. <code>-l</code> option makes sure it will return a list of files</li>
<li><code>sed</code> command then execute the replacement regex on all those files. A regex tip: the forward slash <code>/</code> delimiter could be another delimiter (e.g., <code>#</code>). This might be useful if you need to search HTML files.</li>
</ul>


<p>Example: In my case, all the DDL scripts are in multiple sub-directories under <code>tables</code> directory. To find and remove all <code>KSAFE 1</code> occurrences, the command is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep -rl 'KSAFE 1' tables | xargs sed -i 's/KSAFE 1//g'</span></code></pre></td></tr></table></div></figure>


<p>This will search for the string <code>KSAFE 1</code> in all files in the <code>tables</code> directory and replace <code>KSAFE 1</code> with nothing <code>''</code> for each occurrence of the string in each file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertica Tip: Find Empty Tables]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2015/12/18/vertica-tip-find-empty-tables-in-a-schema/"/>
    <updated>2015-12-18T21:39:56-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2015/12/18/vertica-tip-find-empty-tables-in-a-schema</id>
    <content type="html"><![CDATA[<p>This post is a reminder of using Vertica&rsquo;s system tables for administrating and monitoring our own tables. One common house-cleaning operation when developing/testing in Vertica is to find and drop tables that are empty (truncated) and never used again.</p>

<p>You might ask why the tables are not dropped directly when I truncated the table in the first place. The answer is that all those tables have some specific designs on projection segmentation and partition, and those information will be lost if I drop the tables. These tables are frequently populated with data and cleared for testing purposes, and truncating and inserting with <code>direct</code> <a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Statements/INSERT.htm">hint</a> will give a significant performance boost (see <a href="http://tdongsi.github.io/javascript/blog/2015/12/16/vertica-tip-best-practices/">Best practices</a>).</p>

<!--more-->


<h3>v_monitor schema and COLUMN_STORAGE system table</h3>

<p>The <a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/SystemTables/MONITOR/COLUMN_STORAGE.htm">COLUMN_STORAGE system table</a> in <code>v_monitor</code> schema returns the &ldquo;amount of disk storage used by each column of each projection on each node&rdquo;. Therefore, to get the size of each table, you only need to aggregate the <code>used_byte</code> data, grouped by schema name and table name.</p>

<figure class='code'><figcaption><span>Query to list tables' sizes in a schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">anchor_table_schema</span><span class="p">,</span> <span class="n">anchor_table_name</span><span class="p">,</span> <span class="k">sum</span><span class="p">(</span><span class="n">used_bytes</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">v_monitor</span><span class="p">.</span><span class="n">column_storage</span>
</span><span class='line'><span class="k">where</span> <span class="n">anchor_table_schema</span> <span class="o">=</span> <span class="s1">&#39;some_schema&#39;</span>
</span><span class='line'><span class="k">group</span> <span class="k">by</span> <span class="n">anchor_table_schema</span><span class="p">,</span> <span class="n">anchor_table_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to <a href="http://vertica.tips/2014/01/25/table-size/">here</a>, the number from the above query is the <em>compressed</em> size of the Vertica tables. To get the <em>raw</em> size of the tables, which probably only matters for license limit, perform a <em>license audit</em>, and query the system table <code>license_audits</code> in <code>v_catalog</code> schema. However, the most important takeaway is that empty tables will not appear in this <code>COLUMN_STORAGE</code> system table.</p>

<h3>v_catalog schema and TABLES system table</h3>

<p>The <a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/SystemTables/CATALOG/TABLES.htm">TABLES system table</a> is probably more well-known. It contains all the information about all the tables in all the schemas. For example, to list all the tables in some schema:</p>

<figure class='code'><figcaption><span>Query to list all tables in a schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">table_schema</span><span class="p">,</span> <span class="k">table_name</span> <span class="k">from</span> <span class="n">tables</span>
</span><span class='line'><span class="k">where</span> <span class="n">table_schema</span> <span class="o">=</span> <span class="s1">&#39;some_schema&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another useful system table in <code>v_catalog</code> schema is <code>USER_FUNCTIONS</code> which lists all user-defined functions and their function signatures in the database.</p>

<h3>Find all the empty (truncated) tables</h3>

<p>Having all the tables in <code>v_catalog.tables</code> table and only non-empty tables in <code>v_monitor.column_storage</code> table, finding empty tables is pretty straight-forward in SQL:</p>

<figure class='code'><figcaption><span>Query to find empty tables in a schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">table_name</span>
</span><span class='line'><span class="k">from</span> <span class="n">v_catalog</span><span class="p">.</span><span class="n">tables</span>
</span><span class='line'><span class="k">where</span> <span class="n">table_schema</span> <span class="o">=</span> <span class="s1">&#39;some_schema&#39;</span>
</span><span class='line'><span class="k">EXCEPT</span>
</span><span class='line'><span class="k">select</span> <span class="n">anchor_table_name</span>
</span><span class='line'><span class="k">from</span> <span class="n">v_monitor</span><span class="p">.</span><span class="n">column_storage</span>
</span><span class='line'><span class="k">where</span> <span class="n">anchor_table_schema</span> <span class="o">=</span> <span class="s1">&#39;some_schema&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>External Links</h3>

<ol>
<li><a href="http://vertica.tips/2014/01/25/table-size/">Finding table&rsquo;s compressed size</a></li>
<li><a href="http://vertica.tips/2014/01/24/license-audit-utilization-raw-size/">Vertica License audit</a></li>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/SystemTables/MONITOR/COLUMN_STORAGE.htm">COLUMN_STORAGE system table</a></li>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/SystemTables/CATALOG/TABLES.htm">TABLES system table</a></li>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/SystemTables/CATALOG/USER_FUNCTIONS.htm">USER_FUNCTIONS system table</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertica Tip: Using Vsql CLI]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2015/12/17/vertica-tip-using-vsql/"/>
    <updated>2015-12-17T22:54:07-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2015/12/17/vertica-tip-using-vsql</id>
    <content type="html"><![CDATA[<p>Some tips on using command-line tool <code>vsql</code> for connecting and interacting with Vertica database.</p>

<!--more-->


<h3>Using vsql</h3>

<p>You can connect to Vertica database with username and password. When doing this, note that the password might be seen in the command history.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vsql -h internal.vertica.net -p 5433 -d VMart -U vertica_user -w password </span></code></pre></td></tr></table></div></figure>


<p>Or you can connect to Vertica with Kerberos authentication.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vsql -h internal.vertica.net -p 5433 -d VMart -k KerberosServiceName -K KerberosHostName</span></code></pre></td></tr></table></div></figure>


<p>Note that from time to time, you could run into Kerberos GSI failure because the ticket expired. This is how you can renew and extend the ticket: run the following command to refresh Kerberos cache for the headless account <code>vertica_user</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kinit -kt /home/path/to/vertica_user.keytab vertica_user@CORP.INTERNAL.NET</span></code></pre></td></tr></table></div></figure>


<p>You can also run a single SQL command from command line with <code>-c</code> option or, alternatively, a SQL script file with multiple commands with <code>-f</code> option.
These options can be very useful to automate in shell/python scripts.
Note that you can also parameterize your scripts by using <code>-v</code> option to assign variables inside your SQL scripts.</p>

<h3>Vsql meta commands</h3>

<p>Here is list of commonly used vsql <a href="http://my.vertica.com/docs/7.0.x/HTML/index.htm#Authoring/ProgrammersGuide/vsql/Meta-Commands.htm">meta commands</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dbadmin=&gt; \dt — (list of all tables)
</span><span class='line'>dbadmin=&gt; \dt user* — (list of tables starting with user)
</span><span class='line'>dbadmin=&gt; \d tablename — (describe table)
</span><span class='line'>dbadmin=&gt; \dv — (list of all views)</span></code></pre></td></tr></table></div></figure>


<p>Here are the vsql commands to export a file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dbadmin=&gt; \o sample_users_lists.csv
</span><span class='line'>dbadmin=&gt; \f|
</span><span class='line'>dbadmin=&gt; select * from my_dwh.users limit 20;
</span><span class='line'>dbadmin=&gt; \o
</span><span class='line'>dbadmin=&gt; \q</span></code></pre></td></tr></table></div></figure>


<h3>External links</h3>

<ol>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/ConnectingToHPVertica/vsql/CommandLineOptions.htm">Command line options</a></li>
<li><a href="http://my.vertica.com/docs/7.0.x/HTML/index.htm#Authoring/ProgrammersGuide/vsql/Meta-Commands.htm">Meta Commands</a></li>
<li><a href="http://my.vertica.com/docs/7.0.x/HTML/index.htm#Authoring/ProgrammersGuide/vsql/Meta-Commands/TheDPATTERNMeta-commands.htm">Meta Commands: \d[Pattern]</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertica Tip: Best Practices]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2015/12/16/vertica-tip-best-practices/"/>
    <updated>2015-12-16T23:12:06-08:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2015/12/16/vertica-tip-best-practices</id>
    <content type="html"><![CDATA[<p>This post lists some tips and tricks that I learnt when working with Vertica database.</p>

<!--more-->


<h3>General Tips and Tricks</h3>

<h4>CREATE (INSERT)</h4>

<ul>
<li><p>If you want to write data directly to disk and bypass memory, then you should include <code>/*+ direct */</code> as a &ldquo;hint&rdquo; in your <code>INSERT</code> statement. This is especially helpful when you are loading data from big files into Vertica. If you don&rsquo;t use <code>/*+ direct */</code>, then <code>INSERT</code> statement first uses memory, which may be more useful when you want to optimally do inserts and run queries.</p></li>
<li><p>ALWAYS include <code>COMMIT</code> in your SQL statements when you are creating or updating Vertica schemas, because there is NO auto commit in Vertica.</p></li>
<li><p>If you are copying a table, <strong>DO NOT</strong> use <code>CREATE TABLE copy AS SELECT * FROM source</code>. This will give you a copy table with default projections and storage policy. Instead, you should use <code>CREATE TABLE</code> statement with the <a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/AdministratorsGuide/Tables/CreatingATableLikeAnother.htm"><code>LIKE existing_table</code> clause</a> and use <code>INSERT /*+ direct */</code> statement. Creating a table with <code>LIKE</code> option replicates the table definition and storage policy associated with the source table, which can make a significant difference in data loading performance. Note that the <code>LIKE</code> clause does not work if the existing source table is a temporary table.</p></li>
</ul>


<figure class='code'><figcaption><span>DO NOT do this</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">to_schema</span><span class="p">.</span><span class="n">to_table_name</span>
</span><span class='line'><span class="k">as</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">from_schema</span><span class="p">.</span><span class="n">from_table_name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>DO this</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">to_schema</span><span class="p">.</span><span class="n">to_table_name</span> <span class="k">LIKE</span> <span class="n">from_schema</span><span class="p">.</span><span class="n">from_table_name</span> <span class="k">INCLUDING</span> <span class="n">PROJECTIONS</span><span class="p">;</span>
</span><span class='line'><span class="k">INSERT</span> <span class="cm">/*+ direct */</span> <span class="k">INTO</span> <span class="n">to_schema</span><span class="p">.</span><span class="n">to_table_name</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">from_schema</span><span class="p">.</span><span class="n">from_table_name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Before making a copy of a table, be sure to consider alternatives in order to execute optimal queries: create views, rewrite queries, use sub-queries, limit queries to only a subset of data for analysis.</li>
</ul>


<h4>READ</h4>

<ul>
<li><p>Avoid joining large tables (e.g., > 50M records). Run a <code>count(*)</code> on tables before joining and use <code>MERGE JOIN</code> to optimally join tables. When you use smaller subsets of data, the Vertica Optimizer will pick the <code>MERGE JOIN</code> algorithm instead of the <code>HASH JOIN</code> one, which is less optimal.</p></li>
<li><p>When an approximate value will be enough, Vertica offers an alternative to <code>COUNT(DISTINCT)</code>: <code>APPROXIMATE_COUNT_DISTINCT</code>. This function is recommended when you have a large data set and you do not require an exact count of distinct values: e.g., sanity checks that verify the tables are populated. According to <a href="http://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/AnalyzingData/Optimizations/OptimizingCOUNTDISTINCTByCalculatingApproximateCounts.htm">this documentation</a>, you can get much better performance than <code>COUNT(DISTINCT)</code>. <a href="http://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/Functions/Aggregate/APPROXIMATE_COUNT_DISTINCT.htm">Here</a> is an example of the <code>APPROXIMATE_COUNT_DISTINCT</code> syntax that you should use.</p></li>
</ul>


<h4>UPDATE &amp; DELETE</h4>

<ul>
<li><p>Deletes and updates take exclusive locks on the table. Hence, only one <code>DELETE</code> or <code>UPDATE</code> transaction on that table can be in progress at a time and only when no <code>INSERTs</code> are in progress. Deletes and updates on different tables can be run concurrently.</p></li>
<li><p>Try to avoid <code>DELETE</code> or <code>UPDATE</code> as much as you can, especially on shared Vertica databases. Instead, it may work better to move the data you want to update to a new temporary table, work on that copy, drop the original table, and rename the temporary table with the original table name. For example:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="n">temp_table</span> <span class="k">LIKE</span> <span class="n">src_table</span> <span class="k">INCLUDING</span> <span class="n">PROJECTIONS</span><span class="p">;</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">temp_table</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">statement</span> <span class="n">based</span> <span class="k">on</span> <span class="n">the</span> <span class="n">updated</span> <span class="k">data</span> <span class="k">or</span> <span class="n">the</span> <span class="n">needed</span> <span class="k">rows</span><span class="p">);</span>
</span><span class='line'><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">src_table</span><span class="p">;</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">temp_table</span> <span class="k">RENAME</span> <span class="k">TO</span> <span class="n">src_table</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Delete from tables marks rows with delete vectors and stores them so data can be rolled back to a previous epoch. The data must be eventually purged before the database can reclaim disk space.</li>
</ul>


<h3>Query plan</h3>

<p>A query plan is a sequence of step-like paths that the HP Vertica cost-based query optimizer selects to access or alter information in your HP Vertica database. You can get information about <a href="https://my.vertica.com/docs/7.0.x/HTML/Content/Authoring/AdministratorsGuide/EXPLAIN/HowToGetQueryPlanInformation.htm">query plans</a> by prefixing the SQL query with the <code>EXPLAIN</code> command.</p>

<figure class='code'><figcaption><span>EXPLAIN statement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="k">SELECT</span> <span class="n">customer_name</span><span class="p">,</span> <span class="n">customer_state</span> <span class="k">FROM</span> <span class="n">customer_dimension</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">customer_state</span> <span class="k">in</span> <span class="p">(</span><span class="s1">&#39;MA&#39;</span><span class="p">,</span><span class="s1">&#39;NH&#39;</span><span class="p">)</span> <span class="k">AND</span> <span class="n">customer_gender</span> <span class="o">=</span> <span class="s1">&#39;Male&#39;</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customer_name</span> <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The output from a query plan is presented in a tree-like structure, where each step path represents a single operation in the database that the optimizer uses for its execution strategy. The following example output is based on the previous query:</p>

<figure class='code'><figcaption><span>Query Plan description</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>EXPLAIN SELECT
</span><span class='line'>customer_name,
</span><span class='line'>customer_state
</span><span class='line'>FROM customer_dimension
</span><span class='line'>WHERE customer_state in <span class="o">(</span><span class="s1">&#39;MA&#39;</span>,<span class="s1">&#39;NH&#39;</span><span class="o">)</span>
</span><span class='line'>AND <span class="nv">customer_gender</span> <span class="o">=</span> <span class="s1">&#39;Male&#39;</span>
</span><span class='line'>ORDER BY customer_name
</span><span class='line'>LIMIT 10<span class="p">;</span>
</span><span class='line'>Access Path:
</span><span class='line'>+-SELECT  LIMIT <span class="m">10</span> <span class="o">[</span>Cost: 370, Rows: 10<span class="o">]</span> <span class="o">(</span>PATH ID: 0<span class="o">)</span>
</span><span class='line'><span class="p">|</span>  Output Only: <span class="m">10</span> tuples
</span><span class='line'><span class="p">|</span>  Execute on: Query Initiator
</span><span class='line'><span class="p">|</span> +---&gt; SORT <span class="o">[</span>Cost: 370, Rows: 544<span class="o">]</span> <span class="o">(</span>PATH ID: 1<span class="o">)</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span>      Order: customer_dimension.customer_name ASC
</span><span class='line'><span class="p">|</span> <span class="p">|</span>      Output Only: <span class="m">10</span> tuples
</span><span class='line'><span class="p">|</span> <span class="p">|</span>      Execute on: Query Initiator
</span><span class='line'><span class="p">|</span> <span class="p">|</span> +---&gt; STORAGE ACCESS <span class="k">for</span> customer_dimension <span class="o">[</span>Cost: 331, Rows: 544<span class="o">]</span> <span class="o">(</span>PATH ID: 2<span class="o">)</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span> <span class="p">|</span>      Projection: public.customer_dimension_DBD_1_rep_vmartdb_design_vmartdb_design_node0001
</span><span class='line'><span class="p">|</span> <span class="p">|</span> <span class="p">|</span>      Materialize: customer_dimension.customer_state, customer_dimension.customer_name
</span><span class='line'><span class="p">|</span> <span class="p">|</span> <span class="p">|</span>      Filter: <span class="o">(</span>customer_dimension.customer_gender <span class="o">=</span> <span class="s1">&#39;Male&#39;</span><span class="o">)</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span> <span class="p">|</span>      Filter: <span class="o">(</span>customer_dimension.customer_state <span class="o">=</span> ANY <span class="o">(</span>ARRAY<span class="o">[</span><span class="s1">&#39;MA&#39;</span>, <span class="s1">&#39;NH&#39;</span><span class="o">]))</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span> <span class="p">|</span>      Execute on: Query Initiator
</span></code></pre></td></tr></table></div></figure>


<p>If you want to understand the details of the query plan, observe the real-time flow of data through the plan to identify possible query bottlenecks, you can:</p>

<ol>
<li>query the <a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/SystemTables/MONITOR/QUERY_PLAN_PROFILES.htm">V_MONITOR.QUERY_PLAN_PROFILES</a> system table.</li>
<li>review <a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/AdministratorsGuide/Profiling/ProfilingQueryPlanProfiles.htm">Profiling Query Plans</a>.</li>
<li>use <a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Statements/PROFILE.htm">PROFILE</a> statement to view further detailed analysis of your query.</li>
</ol>


<h3>External Links</h3>

<ol>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm">Vertica documentation</a></li>
<li><a href="http://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/Functions/Aggregate/APPROXIMATE_COUNT_DISTINCT.htm">APPROXIMATE_COUNT_DISTINCT</a></li>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/AdministratorsGuide/Tables/CreatingATableLikeAnother.htm">Create a Table Like Another</a></li>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/SystemTables/MONITOR/QUERY_PLAN_PROFILES.htm">V_MONITOR.QUERY_PLAN_PROFILES</a> system table.</li>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/AdministratorsGuide/Profiling/ProfilingQueryPlanProfiles.htm">Profiling Query Plans</a>.</li>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Statements/PROFILE.htm">PROFILE</a> statement.</li>
</ol>

]]></content>
  </entry>
  
</feed>
