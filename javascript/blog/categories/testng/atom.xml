<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testng | Archived Blog Posts]]></title>
  <link href="http://tdongsi.github.io/javascript/blog/categories/testng/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/javascript/"/>
  <updated>2021-03-11T06:55:27-08:00</updated>
  <id>http://tdongsi.github.io/javascript/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Maven Tests in Jenkins]]></title>
    <link href="http://tdongsi.github.io/javascript/blog/2015/09/03/running-maven-tests-in-jenkins/"/>
    <updated>2015-09-03T01:10:36-07:00</updated>
    <id>http://tdongsi.github.io/javascript/blog/2015/09/03/running-maven-tests-in-jenkins</id>
    <content type="html"><![CDATA[<p>A few notes on executing Maven + TestNG tests in Jenkins.</p>

<!--more-->


<h3>Running tests</h3>

<p>Use the following Maven commands in Jenkins when executing tests.</p>

<pre><code class="plain Running tests">mvn -f pom.xml clean test
</code></pre>

<p>In pom.xml, the test suite file should be specified, such as testng.xml.
To run a custom TestNG test suite file, use the following command:</p>

<pre><code class="plain Custom TestNG test suite">mvn clean test -DsuiteXmlFile=testng.xml
</code></pre>

<p>To run a specific TestNG class, use the following command:</p>

<pre><code class="plain Run specific TestNG class/method">mvn clean test -Dtest=TestCircle

mvn clean test -Dtest=TestCircle#test_area
</code></pre>

<p>Note that the symbol <code>#</code> must be used between class name and method name.
In other words, <code>-Dtest=TestCircle.test_area</code> will not work.</p>

<h4>Links</h4>

<ol>
<li><a href="http://www.vazzolla.com/2013/03/how-to-select-which-testng-suites-to-run-in-maven-surefire-plugin/">Custom TestNG suite file</a></li>
<li><a href="http://stackoverflow.com/questions/1873995/run-a-single-test-method-with-maven">Select method in test class</a></li>
</ol>


<h3>Configuring tests</h3>

<p>Sometimes, your tests need to access resources outside of standard Eclipse/Maven project folders.
For the tests to pass both locally and on Jenkins, the full path to the current workspace may be required to resolve the file path to those resources in tests.
Jenkins set a number of <a href="https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project">environment variables</a>, including the variable
<code>WORKSPACE</code> as the absolute path of the workspace.</p>

<p>For local environment, we need to set environment variable <code>WORKSPACE</code> to simulate Jenkins environment.
In the tests, we need to retrieve this environment variable, as follows in Java:</p>

<pre><code class="java Getting environment variable">String wsPath = System.getenv("WORKSPACE");
</code></pre>

<p>Besides workspace&rsquo;s absolute path, we might also need to configure some constants in tests from a configuration file.
When initializing constants from properties files in Maven, remember:</p>

<ul>
<li>Use <code>this.class.getResourceAsStream()</code> method.</li>
<li>By Maven convention, properties file should be in <code>src/main/resources</code> folder.</li>
<li>Default property values could be used when reading properties file.</li>
</ul>


<pre><code class="java Example">    public static final String CONFIG_PATH = "/config.properties";

    static {
        Properties prop = new Properties();
        try ( InputStream stream = VerticaConnection.class.getResourceAsStream(MyConstants.CONFIG_PATH) ) {
            prop.load(stream);

            // Set values from config file with default values
            UNIT_TEST_SCHEMA = prop.getProperty("schema", "UNIT_TEST");
            FUNC_TEST_SCHEMA = prop.getProperty("schema", "FUNC_TEST");
            VSQL_PATH = prop.getProperty("vsql_path", "/opt/vertica/bin/vsql");

        } catch (FileNotFoundException e) {
            System.err.println("Cannot find file " + MyConstants.CONFIG_PATH);
            throw new IllegalStateException("Could not init class VerticaConnection.", e);
        } catch (IOException e) {
            System.err.println("Error reading file " + MyConstants.CONFIG_PATH);
            throw new IllegalStateException("Could not init class VerticaConnection.", e);
        }
    }
</code></pre>

<p>Note that the location of the properties file in the example above is <code>src/main/resources/config.properties</code>.</p>
]]></content>
  </entry>
  
</feed>
